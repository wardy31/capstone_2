{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nexport default {\n  // updated(){\n  //   if(this.exists){\n  //     this.existData.forEach((element,index) => {\n  //       console.log('le',element.answer, index);\n  //       this.answer.push(element.answer)\n  //     });\n  //   }\n  // },\n  async mounted() {\n    this.$store.dispatch(\"followUps/checkFollowUp\");\n    await this.$store.dispatch(\"declaration/getQuestions\");\n    await this.$store.dispatch(\"declaration/checkExist\");\n  },\n  computed: {\n    ...mapState({\n      loading: state => state.declaration.submit.loading,\n      loadingForm: state => state.declaration.all.loading,\n      questionnaires: state => state.declaration.all.data,\n      existData: state => state.declaration.existForm.data,\n      exists: state => state.declaration.existForm.exist,\n      checkContact: state => state.followUps.check.data\n    })\n  },\n  data() {\n    return {\n      answer: [],\n      displayAnswer: [],\n      questionnaire_id: [],\n      error: false,\n      all: []\n    };\n  },\n  methods: {\n    checkDays() {\n      let taggedHasDays = false;\n      let patientHasDays = true;\n\n      // for (const iterator of this.checkContact.data[0]?.user_tagged) {\n      //     if(iterator.days_left != 0){\n      //       taggedHasDays = true \n      //     }\n      // }\n\n      // for (const iterator of this.checkContact.data[0]?.user_patient) {\n      //     if(iterator.days_left != 0){\n      //       patientHasDays = true \n      //     }\n      // }\n\n      // checkContact.data[0]?.user_tagged || checkContact.data[0]?.user_patient\n      return taggedHasDays || patientHasDays;\n    },\n    submitForm() {\n      this.$store.dispatch(\"declaration/submitForm\", this.answers);\n    },\n    submit() {\n      if (this.answer.length == 0) {\n        console.log(\"zero\");\n        this.error = true;\n        return this.answer.length == 0;\n      }\n      for (const value of this.answer) {\n        if (value == undefined || value == null || this.questionnaires.length > this.answer.length || this.answer.length == 0) {\n          console.log(\"w\");\n          this.error = true;\n          return null;\n        }\n      }\n      this.answer.forEach((element, index) => {\n        this.all.push({\n          questionnaire_id: this.questionnaire_id[index],\n          answer: element == \"true\" ? true : false\n        });\n      });\n      console.log(this.all);\n      this.$store.dispatch(\"declaration/submitForm\", this.all);\n      this.reset();\n    },\n    edit() {\n      this.$store.state.declaration.existForm.exist = false;\n    },\n    reset() {\n      this.all = [];\n      this.answer = [];\n      this.questionnaire_id = [];\n    }\n  }\n};","map":{"version":3,"mappings":";AA6HA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA;IACA;IACA;EACA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;QACAC;QACA;QACA;MACA;MAEA;QACA,IACAC,sBACAA,iBACA,mDACA,yBACA;UACAD;UACA;UACA;QACA;MACA;MACA;QACA;UACAP;UACAF;QACA;MACA;MAEAS;MACA;MACA;IACA;IACAE;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;EACA;AACA","names":["computed","loading","loadingForm","questionnaires","existData","exists","checkContact","data","answer","displayAnswer","questionnaire_id","error","all","methods","checkDays","submitForm","submit","console","value","edit","reset"],"sourceRoot":"src/views/user/pages","sources":["HealthDeclarationForm.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-main class=\"accent\">\n      {{ checkDays()}}\n      <div v-if=\"checkContact.data[0]?.user_tagged || checkContact.data[0]?.user_patient\">\n        <v-container>\n          <div class=\"text-center mt-12 \">\n            <v-avatar size=\"240\" tile>\n              <img :src=\"require('@/assets/relax.svg')\" alt=\"alt\">\n            </v-avatar>\n            <div class=\"primary--text mt-4 font-weight-bold text-h5 text-lg-h4\">Sorry!</div>\n            <div class=\"text-body-1 mt-2\">you are temporarily cannot access this feature.</div>\n          </div>\n        </v-container>\n      </div>\n\n      <div v-else>\n        <v-container v-if=\"questionnaires.length == 0 || loading\">\n          <div class=\"mx-auto mx-lg-16\">\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\n          </div>\n        </v-container>\n\n        <v-container>\n          <div class=\"mx-auto mx-lg-16\" v-if=\"exists\">\n            <h2 class=\"primary--text font-weight-bold mt-4 mt-lg-12 mb-1\">\n              Health Declaration Form\n            </h2>\n            <h5 class=\"secondary--text\">Filled Up Form</h5>\n\n            <v-alert type=\"success\" color=\"primary\" :value=\"true\" text info class=\"mt-8 text-body-2\" prominent outlined\n              dense>\n              Thank you for submitting your response. The form will be active tomorrow.\n            </v-alert>\n\n            <div class=\"d-flex justify-center mt-16 mt-lg-12\">\n              <v-avatar :size=\"$vuetify.breakpoint.mobile ? 180 : 260\" tile>\n                <img src=\"@/assets/completed.svg\" alt=\"\">\n              </v-avatar>\n            </div>\n            <!-- <v-card\n            class=\"mt-8\"\n            v-for=\"existed in existData\"\n            :key=\"existed.id\"\n            :disabled=\"exists\"\n          >\n            <v-card-title\n              class=\"text-body-1 black--text font-weight-bold text-justify\"\n            >\n              {{ existed.question.question }}\n            </v-card-title>\n            <v-card-text v-if=\"existed.question.sub_question\">\n              <div>\n                <ul\n                  class=\"black--text text-body-2 text-capitalize\"\n                  v-for=\"splits in existed.question.sub_question.split(',')\"\n                  :key=\"splits\"\n                >\n                  <li class=\"mb-1\">{{ splits }}</li>\n                </ul>\n              </div>\n            </v-card-text>\n            <v-card-actions>\n              <h4 class=\"mx-4 my-3\">\n                Answer :\n                <b class=\"ml-2 primary--text\">{{\n                  existed.answer ? \"Yes\" : \"No\"\n                }}</b>\n              </h4>\n            </v-card-actions>\n          </v-card>\n          <v-btn\n            class=\"text-capitalize mt-12 py-lg-4 py-2 font-weight-bold\"\n            :block=\"$vuetify.breakpoint.mobile\"\n            color=\"primary\"\n            :loading=\"loading\"\n            @click=\"edit\"\n            >Edit Form</v-btn\n          > -->\n          </div>\n\n          <div class=\"mx-auto mx-lg-16\" v-else>\n            <h2 class=\"primary--text font-weight-bold mt-4 mt-lg-12 mb-1\">\n              Health Declaration Form\n            </h2>\n            <h5 class=\"secondary--text\">Filled Up Form</h5>\n            <v-card class=\"mt-8\" v-for=\"(question, index) in questionnaires\" :key=\"question.id\">\n              <v-card-title class=\"text-body-1 black--text font-weight-bold text-justify\">\n                {{ question.question }}\n              </v-card-title>\n              <v-card-text v-if=\"question.sub_question\">\n                <div>\n                  <ul class=\"black--text text-body-2 text-capitalize\" v-for=\"splits in question.sub_question.split(',')\"\n                    :key=\"splits\">\n                    <li class=\"mb-1\">{{ splits }}</li>\n                  </ul>\n                </div>\n              </v-card-text>\n              <v-card-actions class=\"ml-2 mt-n4\">\n                <v-checkbox label=\"Yes\" @click=\"questionnaire_id[index] = question.id\" v-model=\"answer[index]\"\n                  value=\"true\" class=\"mr-4\"></v-checkbox>\n                <v-checkbox label=\"No\" @click=\"questionnaire_id[index] = question.id\" v-model=\"answer[index]\"\n                  value=\"false\"></v-checkbox>\n              </v-card-actions>\n            </v-card>\n\n            <v-btn class=\"text-capitalize mt-6 py-6 font-weight-bold\" block color=\"primary\" :loading=\"loading\"\n              @click=\"submit\">Submit Form</v-btn>\n\n            <v-btn color=\"black\" class=\"text-capitalize mt-2 font-weight-bold\" text plain @click=\"reset\"\n              block>Reset</v-btn>\n          </div>\n        </v-container>\n      </div>\n      <v-snackbar v-model=\"error\" color=\"red\" right bottom timeout=\"2000\" app>\n        <v-icon left>error</v-icon>\n        Please Filled Up All Questions\n      </v-snackbar>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  // updated(){\n  //   if(this.exists){\n  //     this.existData.forEach((element,index) => {\n  //       console.log('le',element.answer, index);\n  //       this.answer.push(element.answer)\n  //     });\n  //   }\n  // },\n  async mounted() {\n    this.$store.dispatch(\"followUps/checkFollowUp\");\n    await this.$store.dispatch(\"declaration/getQuestions\");\n    await this.$store.dispatch(\"declaration/checkExist\");\n  },\n  computed: {\n    ...mapState({\n      loading: (state) => state.declaration.submit.loading,\n      loadingForm: (state) => state.declaration.all.loading,\n      questionnaires: (state) => state.declaration.all.data,\n      existData: (state) => state.declaration.existForm.data,\n      exists: (state) => state.declaration.existForm.exist,\n      checkContact: (state) => state.followUps.check.data,\n    }),\n  },\n\n  data() {\n    return {\n      answer: [],\n      displayAnswer: [],\n      questionnaire_id: [],\n      error: false,\n      all: [],\n    };\n  },\n  methods: {\n    checkDays(){\n      let taggedHasDays = false\n      let patientHasDays = true\n\n      // for (const iterator of this.checkContact.data[0]?.user_tagged) {\n      //     if(iterator.days_left != 0){\n      //       taggedHasDays = true \n      //     }\n      // }\n\n      // for (const iterator of this.checkContact.data[0]?.user_patient) {\n      //     if(iterator.days_left != 0){\n      //       patientHasDays = true \n      //     }\n      // }\n\n      // checkContact.data[0]?.user_tagged || checkContact.data[0]?.user_patient\n      return (taggedHasDays || patientHasDays)\n    },\n    submitForm() {\n      this.$store.dispatch(\"declaration/submitForm\", this.answers);\n    },\n    submit() {\n      if (this.answer.length == 0) {\n        console.log(\"zero\");\n        this.error = true;\n        return this.answer.length == 0;\n      }\n\n      for (const value of this.answer) {\n        if (\n          value == undefined ||\n          value == null ||\n          this.questionnaires.length > this.answer.length ||\n          this.answer.length == 0\n        ) {\n          console.log(\"w\");\n          this.error = true;\n          return null;\n        }\n      }\n      this.answer.forEach((element, index) => {\n        this.all.push({\n          questionnaire_id: this.questionnaire_id[index],\n          answer: element == \"true\" ? true : false,\n        });\n      });\n\n      console.log(this.all)\n      this.$store.dispatch(\"declaration/submitForm\", this.all);\n      this.reset();\n    },\n    edit() {\n      this.$store.state.declaration.existForm.exist = false;\n    },\n    reset() {\n      this.all = [];\n      this.answer = [];\n      this.questionnaire_id = [];\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}