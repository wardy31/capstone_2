{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox, Point } from '../classes';\nimport { nonMaxSuppression } from '../ops';\nimport { CELL_SIZE, CELL_STRIDE } from './config';\nimport { getSizesForScale } from './getSizesForScale';\nimport { MtcnnBox } from './MtcnnBox';\nimport { normalize } from './normalize';\nimport { PNet } from './PNet';\nfunction rescaleAndNormalize(x, scale) {\n  return tf.tidy(function () {\n    var _a = getSizesForScale(scale, x.shape.slice(1)),\n      height = _a.height,\n      width = _a.width;\n    var resized = tf.image.resizeBilinear(x, [height, width]);\n    var normalized = normalize(resized);\n    return tf.transpose(normalized, [0, 2, 1, 3]);\n  });\n}\nfunction extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold) {\n  // TODO: fix this!, maybe better to use tf.gather here\n  var indices = [];\n  var scoresData = scoresTensor.arraySync();\n  for (var y = 0; y < scoresTensor.shape[0]; y++) {\n    for (var x = 0; x < scoresTensor.shape[1]; x++) {\n      if (scoresData[y][x] >= scoreThreshold) {\n        indices.push(new Point(x, y));\n      }\n    }\n  }\n  var boundingBoxes = indices.map(function (idx) {\n    var cell = new BoundingBox(Math.round((idx.y * CELL_STRIDE + 1) / scale), Math.round((idx.x * CELL_STRIDE + 1) / scale), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale));\n    var score = scoresData[idx.y][idx.x];\n    var regionsData = regionsTensor.arraySync();\n    var region = new MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);\n    return {\n      cell: cell,\n      score: score,\n      region: region\n    };\n  });\n  return boundingBoxes;\n}\nexport function stage1(imgTensor, scales, scoreThreshold, params, stats) {\n  stats.stage1 = [];\n  var pnetOutputs = scales.map(function (scale) {\n    return tf.tidy(function () {\n      var statsForScale = {\n        scale: scale\n      };\n      var resized = rescaleAndNormalize(imgTensor, scale);\n      var ts = Date.now();\n      var _a = PNet(resized, params),\n        prob = _a.prob,\n        regions = _a.regions;\n      statsForScale.pnet = Date.now() - ts;\n      var scoresTensor = tf.unstack(tf.unstack(prob, 3)[1])[0];\n      var regionsTensor = tf.unstack(regions)[0];\n      return {\n        scoresTensor: scoresTensor,\n        regionsTensor: regionsTensor,\n        scale: scale,\n        statsForScale: statsForScale\n      };\n    });\n  });\n  var boxesForScale = pnetOutputs.map(function (_a) {\n    var scoresTensor = _a.scoresTensor,\n      regionsTensor = _a.regionsTensor,\n      scale = _a.scale,\n      statsForScale = _a.statsForScale;\n    var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold);\n    scoresTensor.dispose();\n    regionsTensor.dispose();\n    if (!boundingBoxes.length) {\n      stats.stage1.push(statsForScale);\n      return [];\n    }\n    var ts = Date.now();\n    var indices = nonMaxSuppression(boundingBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), boundingBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.5);\n    statsForScale.nms = Date.now() - ts;\n    statsForScale.numBoxes = indices.length;\n    stats.stage1.push(statsForScale);\n    return indices.map(function (boxIdx) {\n      return boundingBoxes[boxIdx];\n    });\n  });\n  var allBoxes = boxesForScale.reduce(function (all, boxes) {\n    return all.concat(boxes);\n  }, []);\n  var finalBoxes = [];\n  var finalScores = [];\n  if (allBoxes.length > 0) {\n    var ts = Date.now();\n    var indices = nonMaxSuppression(allBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), allBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.7);\n    stats.stage1_nms = Date.now() - ts;\n    finalScores = indices.map(function (idx) {\n      return allBoxes[idx].score;\n    });\n    finalBoxes = indices.map(function (idx) {\n      return allBoxes[idx];\n    }).map(function (_a) {\n      var cell = _a.cell,\n        region = _a.region;\n      return new BoundingBox(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();\n    });\n  }\n  return {\n    boxes: finalBoxes,\n    scores: finalScores\n  };\n}","map":{"version":3,"mappings":"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","names":["tf","BoundingBox","Point","nonMaxSuppression","CELL_SIZE","CELL_STRIDE","getSizesForScale","MtcnnBox","normalize","PNet","rescaleAndNormalize","x","scale","tidy","height","width","resized","image","resizeBilinear","normalized","transpose","extractBoundingBoxes","scoresTensor","regionsTensor","scoreThreshold","indices","scoresData","arraySync","y","shape","push","boundingBoxes","map","cell","Math","round","idx","score","regionsData","region","stage1","imgTensor","scales","params","stats","pnetOutputs","statsForScale","ts","Date","now","prob","regions","pnet","unstack","boxesForScale","_a","dispose","length","nms","numBoxes","boxIdx","allBoxes","reduce","all","boxes","concat","finalBoxes","finalScores","stage1_nms","left","top","right","bottom","toSquare","scores"],"sourceRoot":"","sources":["../../../src/mtcnn/stage1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}