{"ast":null,"code":"import { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { resolveInput } from '../dom/resolveInput';\nexport var AnchorPosition;\n(function (AnchorPosition) {\n  AnchorPosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  AnchorPosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  AnchorPosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n  AnchorPosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n})(AnchorPosition || (AnchorPosition = {}));\nvar DrawTextFieldOptions = /** @class */function () {\n  function DrawTextFieldOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var anchorPosition = options.anchorPosition,\n      backgroundColor = options.backgroundColor,\n      fontColor = options.fontColor,\n      fontSize = options.fontSize,\n      fontStyle = options.fontStyle,\n      padding = options.padding;\n    this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;\n    this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';\n    this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';\n    this.fontSize = fontSize || 14;\n    this.fontStyle = fontStyle || 'Georgia';\n    this.padding = padding || 4;\n  }\n  return DrawTextFieldOptions;\n}();\nexport { DrawTextFieldOptions };\nvar DrawTextField = /** @class */function () {\n  function DrawTextField(text, anchor, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.text = typeof text === 'string' ? [text] : text instanceof DrawTextField ? text.text : text;\n    this.anchor = anchor;\n    this.options = new DrawTextFieldOptions(options);\n  }\n  DrawTextField.prototype.measureWidth = function (ctx) {\n    var padding = this.options.padding;\n    return this.text.map(function (l) {\n      return ctx.measureText(l).width;\n    }).reduce(function (w0, w1) {\n      return w0 < w1 ? w1 : w0;\n    }, 0) + 2 * padding;\n  };\n  DrawTextField.prototype.measureHeight = function () {\n    var _a = this.options,\n      fontSize = _a.fontSize,\n      padding = _a.padding;\n    return this.text.length * fontSize + 2 * padding;\n  };\n  DrawTextField.prototype.getUpperLeft = function (ctx, canvasDims) {\n    var anchorPosition = this.options.anchorPosition;\n    var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;\n    var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;\n    var textFieldWidth = this.measureWidth(ctx);\n    var textFieldHeight = this.measureHeight();\n    var x = isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x;\n    var y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y;\n    // adjust anchor if text box exceeds canvas borders\n    if (canvasDims) {\n      var width = canvasDims.width,\n        height = canvasDims.height;\n      var newX = Math.max(Math.min(x, width - textFieldWidth), 0);\n      var newY = Math.max(Math.min(y, height - textFieldHeight), 0);\n      return {\n        x: newX,\n        y: newY\n      };\n    }\n    return {\n      x: x,\n      y: y\n    };\n  };\n  DrawTextField.prototype.draw = function (canvasArg) {\n    var canvas = resolveInput(canvasArg);\n    var ctx = getContext2dOrThrow(canvas);\n    var _a = this.options,\n      backgroundColor = _a.backgroundColor,\n      fontColor = _a.fontColor,\n      fontSize = _a.fontSize,\n      fontStyle = _a.fontStyle,\n      padding = _a.padding;\n    ctx.font = fontSize + \"px \" + fontStyle;\n    var maxTextWidth = this.measureWidth(ctx);\n    var textHeight = this.measureHeight();\n    ctx.fillStyle = backgroundColor;\n    var upperLeft = this.getUpperLeft(ctx, canvas);\n    ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);\n    ctx.fillStyle = fontColor;\n    this.text.forEach(function (textLine, i) {\n      var x = padding + upperLeft.x;\n      var y = padding + upperLeft.y + (i + 1) * fontSize;\n      ctx.fillText(textLine, x, y);\n    });\n  };\n  return DrawTextField;\n}();\nexport { DrawTextField };","map":{"version":3,"mappings":"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","names":["getContext2dOrThrow","resolveInput","AnchorPosition","options","backgroundColor","fontColor","fontSize","fontStyle","padding","anchorPosition","TOP_LEFT","text","anchor","DrawTextField","DrawTextFieldOptions","ctx","map","measureText","l","width","reduce","w0","w1","length","canvasDims","isShiftLeft","BOTTOM_RIGHT","TOP_RIGHT","isShiftTop","BOTTOM_LEFT","textFieldWidth","measureWidth","textFieldHeight","measureHeight","x","y","height","newX","Math","max","min","newY","canvasArg","canvas","font","maxTextWidth","textHeight","fillStyle","upperLeft","getUpperLeft","fillRect","forEach","textLine","i","fillText"],"sourceRoot":"","sources":["../../../src/draw/DrawTextField.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}