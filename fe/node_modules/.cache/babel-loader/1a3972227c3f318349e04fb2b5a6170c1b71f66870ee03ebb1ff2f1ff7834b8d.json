{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function (_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3 /*break*/, 5];\n          if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\n          return [4 /*yield*/, extractFaceTensors(input, faceBoxes)];\n        case 1:\n          _b = _c.sent();\n          return [3 /*break*/, 4];\n        case 2:\n          return [4 /*yield*/, extractFaces(input, faceBoxes)];\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n        case 4:\n          _a = _b;\n          _c.label = 5;\n        case 5:\n          faces = _a;\n          return [4 /*yield*/, computeResults(faces)];\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2 /*return*/, results];\n      }\n    });\n  });\n}\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n    return __generator(this, function (_a) {\n      return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2 /*return*/, computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAG3C,SAASC,YAAY,EAAEC,kBAAkB,QAAmB,QAAQ;AAEpE,SAASC,mBAAmB,QAA2B,gCAAgC;AAEvF,OAAM,SAAgBC,gCAAgC,CACpDC,aAAwB,EACxBC,KAAgB,EAChBC,cAAmF,EACnFC,cAA8D,EAC9DC,mBAAwH;EAAxH;IAAAA,gCAAyFC,EAAe;UAAbC,4BAAW;MAAO,kBAAW;IAAX,CAAW;EAAA;;;;;;UAElHC,SAAS,GAAGP,aAAa,CAACQ,GAAG,CAAC,sBAAY;YAC9C,0BAAmB,CAACC,YAAY,CAAC,GAC7BL,mBAAmB,CAACK,YAAY,CAAC,GACjCA,YAAY,CAACC,SAAS;UAF1B,CAE0B,CAC3B;UACqDL,mBAAc;kBAAd;gBACpDJ,KAAK,YAAYN,EAAE,CAACgB,MAAM,GAA1B;UACI,qBAAMd,kBAAkB,CAACI,KAAK,EAAEM,SAAS,CAAC;;UAA1CK,cAA0C;;;UAC1C,qBAAMhB,YAAY,CAACK,KAAK,EAAEM,SAAS,CAAC;;UAApCK,cAAoC;;;UAH8BP,OAIvE;;;UAJKQ,KAAK,KAIV;UAEe,qBAAMX,cAAc,CAACW,KAAK,CAAC;;UAArCC,OAAO,GAAGC,SAA2B;UAE3CF,KAAK,CAACG,OAAO,CAAC,WAAC;YAAI,QAAC,YAAYrB,EAAE,CAACgB,MAAM,IAAIM,CAAC,CAACC,OAAO,EAAE;UAArC,CAAqC,CAAC;UAEzD,sBAAOJ,OAAO;MAAA;;;;AAGhB,OAAM,SAAgBK,iCAAiC,CACrDV,YAAqB,EACrBR,KAAgB,EAChBmB,aAA0E,EAC1EjB,cAA8D,EAC9DC,mBAAsF;;;;MAEtF,sBAAOL,gCAAgC,CACrC,CAACU,YAAY,CAAC,EACdR,KAAK,EACL,UAAMY,KAAK;QAAA;UAAA;YAAI,mCAAa,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAAA,EACtCV,cAAc,EACdC,mBAAmB,CACpB","names":["tf","extractFaces","extractFaceTensors","isWithFaceLandmarks","extractAllFacesAndComputeResults","parentResults","input","computeResults","extractedFaces","getRectForAlignment","_a","alignedRect","faceBoxes","map","parentResult","detection","Tensor","_b","faces","results","_c","forEach","f","dispose","extractSingleFaceAndComputeResult","computeResult"],"sourceRoot":"","sources":["../../../src/globalApi/extractFacesAndComputeResults.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}