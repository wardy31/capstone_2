{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { createCanvas, createCanvasFromMedia, getContext2dOrThrow } from '../dom';\nimport { env } from '../env';\nimport { normalize } from './normalize';\nexport function extractImagePatches(img, boxes, _a) {\n  var width = _a.width,\n    height = _a.height;\n  return __awaiter(this, void 0, void 0, function () {\n    var imgCtx, bitmaps, imagePatchesDatas;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          imgCtx = getContext2dOrThrow(img);\n          return [4 /*yield*/, Promise.all(boxes.map(function (box) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, y, ey, x, ex, fromX, fromY, imgData;\n              return __generator(this, function (_b) {\n                _a = box.padAtBorders(img.height, img.width), y = _a.y, ey = _a.ey, x = _a.x, ex = _a.ex;\n                fromX = x - 1;\n                fromY = y - 1;\n                imgData = imgCtx.getImageData(fromX, fromY, ex - fromX, ey - fromY);\n                return [2 /*return*/, env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)];\n              });\n            });\n          }))];\n        case 1:\n          bitmaps = _b.sent();\n          imagePatchesDatas = [];\n          bitmaps.forEach(function (bmp) {\n            var patch = createCanvas({\n              width: width,\n              height: height\n            });\n            var patchCtx = getContext2dOrThrow(patch);\n            patchCtx.drawImage(bmp, 0, 0, width, height);\n            var data = patchCtx.getImageData(0, 0, width, height).data;\n            var currData = [];\n            // RGBA -> BGR\n            for (var i = 0; i < data.length; i += 4) {\n              currData.push(data[i + 2]);\n              currData.push(data[i + 1]);\n              currData.push(data[i]);\n            }\n            imagePatchesDatas.push(currData);\n          });\n          return [2 /*return*/, imagePatchesDatas.map(function (data) {\n            var t = tf.tidy(function () {\n              var imagePatchTensor = tf.transpose(tf.tensor4d(data, [1, width, height, 3]), [0, 2, 1, 3]).toFloat();\n              return normalize(imagePatchTensor);\n            });\n            return t;\n          })];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAG3C,SAASC,YAAY,EAAEC,qBAAqB,EAAEC,mBAAmB,QAAQ,QAAQ;AACjF,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,SAAS,QAAQ,aAAa;AAEvC,OAAM,SAAgBC,mBAAmB,CACvCC,GAAsB,EACtBC,KAAY,EACZC,EAA8B;MAA5BC,gBAAK;IAAEC,kBAAM;;;;;;;UAITC,MAAM,GAAGT,mBAAmB,CAACI,GAAG,CAAC;UAEvB,qBAAMM,OAAO,CAACC,GAAG,CAACN,KAAK,CAACO,GAAG,CAAC,UAAMC,GAAG;YAAA;;;gBAE7CP,KAAmBO,GAAG,CAACC,YAAY,CAACV,GAAG,CAACI,MAAM,EAAEJ,GAAG,CAACG,KAAK,CAAC,EAAxDQ,CAAC,SAAEC,EAAE,UAAEC,CAAC,SAAEC,EAAE;gBAEdC,KAAK,GAAGF,CAAC,GAAG,CAAC;gBACbG,KAAK,GAAGL,CAAC,GAAG,CAAC;gBACbM,OAAO,GAAGZ,MAAM,CAACa,YAAY,CAACH,KAAK,EAAEC,KAAK,EAAGF,EAAE,GAAGC,KAAK,EAAIH,EAAE,GAAGI,KAAK,CAAE;gBAE7E,sBAAOnB,GAAG,CAACsB,QAAQ,EAAE,GAAGxB,qBAAqB,CAACsB,OAAO,CAAC,GAAGG,iBAAiB,CAACH,OAAO,CAAC;;;WACpF,CAAC,CAAC;;UATGI,OAAO,GAAGC,SASb;UAEGC,iBAAiB,GAAe,EAAE;UAExCF,OAAO,CAACG,OAAO,CAAC,aAAG;YACjB,IAAMC,KAAK,GAAG/B,YAAY,CAAC;cAAES,KAAK;cAAEC,MAAM;YAAA,CAAE,CAAC;YAC7C,IAAMsB,QAAQ,GAAG9B,mBAAmB,CAAC6B,KAAK,CAAC;YAC3CC,QAAQ,CAACC,SAAS,CAACC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEzB,KAAK,EAAEC,MAAM,CAAC;YACpC,0DAAI;YAEZ,IAAMyB,QAAQ,GAAG,EAAE;YACnB;YACA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,MAAM,EAAEF,CAAC,IAAE,CAAC,EAAE;cACpCD,QAAQ,CAACI,IAAI,CAACF,IAAI,CAACD,CAAC,GAAG,CAAC,CAAC,CAAC;cAC1BD,QAAQ,CAACI,IAAI,CAACF,IAAI,CAACD,CAAC,GAAG,CAAC,CAAC,CAAC;cAC1BD,QAAQ,CAACI,IAAI,CAACF,IAAI,CAACD,CAAC,CAAC,CAAC;;YAExBP,iBAAiB,CAACU,IAAI,CAACJ,QAAQ,CAAC;UAClC,CAAC,CAAC;UAGF,sBAAON,iBAAiB,CAACf,GAAG,CAAC,cAAI;YAC/B,IAAM0B,CAAC,GAAGzC,EAAE,CAAC0C,IAAI,CAAC;cAChB,IAAMC,gBAAgB,GAAG3C,EAAE,CAAC4C,SAAS,CACnC5C,EAAE,CAAC6C,QAAQ,CAACP,IAAI,EAAE,CAAC,CAAC,EAAE5B,KAAK,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EACxC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACb,CAACmC,OAAO,EAAiB;cAE1B,OAAOzC,SAAS,CAACsC,gBAAgB,CAAC;YACpC,CAAC,CAAC;YACF,OAAOF,CAAC;UACV,CAAC,CAAC;MAAA","names":["tf","createCanvas","createCanvasFromMedia","getContext2dOrThrow","env","normalize","extractImagePatches","img","boxes","_a","width","height","imgCtx","Promise","all","map","box","padAtBorders","y","ey","x","ex","fromX","fromY","imgData","getImageData","isNodejs","createImageBitmap","bitmaps","_b","imagePatchesDatas","forEach","patch","patchCtx","drawImage","bmp","currData","i","data","length","push","t","tidy","imagePatchTensor","transpose","tensor4d","toFloat"],"sourceRoot":"","sources":["../../../src/mtcnn/extractImagePatches.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}