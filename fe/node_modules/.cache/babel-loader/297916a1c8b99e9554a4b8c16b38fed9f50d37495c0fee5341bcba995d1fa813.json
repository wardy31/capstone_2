{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { FaceExpressions } from './FaceExpressions';\nvar FaceExpressionNet = /** @class */function (_super) {\n  __extends(FaceExpressionNet, _super);\n  function FaceExpressionNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new FaceFeatureExtractor();\n    }\n    return _super.call(this, 'FaceExpressionNet', faceFeatureExtractor) || this;\n  }\n  FaceExpressionNet.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      return tf.softmax(_this.runNet(input));\n    });\n  };\n  FaceExpressionNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceExpressionNet.prototype.predictExpressions = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, out, probabilitesByBatch, predictionsByBatch;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            return [4 /*yield*/, this.forwardInput(netInput)];\n          case 2:\n            out = _a.sent();\n            return [4 /*yield*/, Promise.all(tf.unstack(out).map(function (t) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var data;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, t.data()];\n                    case 1:\n                      data = _a.sent();\n                      t.dispose();\n                      return [2 /*return*/, data];\n                  }\n                });\n              });\n            }))];\n          case 3:\n            probabilitesByBatch = _a.sent();\n            out.dispose();\n            predictionsByBatch = probabilitesByBatch.map(function (probabilites) {\n              return new FaceExpressions(probabilites);\n            });\n            return [2 /*return*/, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n  FaceExpressionNet.prototype.getDefaultModelName = function () {\n    return 'face_expression_model';\n  };\n  FaceExpressionNet.prototype.getClassifierChannelsIn = function () {\n    return 256;\n  };\n  FaceExpressionNet.prototype.getClassifierChannelsOut = function () {\n    return 7;\n  };\n  return FaceExpressionNet;\n}(FaceProcessor);\nexport { FaceExpressionNet };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAE3C,SAA8BC,UAAU,QAAQ,QAAQ;AACxD,SAASC,oBAAoB,QAAQ,8CAA8C;AAEnF,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,eAAe,QAAQ,mBAAmB;AAEnD;EAAuCC;EAErC,2BAAYC,oBAAuE;IAAvE;MAAAA,2BAAiDJ,oBAAoB,EAAE;IAAA;WACjFK,kBAAM,mBAAmB,EAAED,oBAAoB,CAAC;EAClD;EAEOE,wCAAY,GAAnB,UAAoBC,KAA6B;IAAjD;IACE,OAAOT,EAAE,CAACU,IAAI,CAAC;MAAM,SAAE,CAACC,OAAO,CAACC,KAAI,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC;IAA9B,CAA8B,CAAC;EACtD,CAAC;EAEYD,mCAAO,GAApB,UAAqBC,KAAgB;;;;;;YAC5BK,SAAI,CAACC,YAAY;YAAC,qBAAMd,UAAU,CAACQ,KAAK,CAAC;;YAAhD,sBAAOK,aAAI,GAAcE,SAAuB,EAAC;QAAA;;;GAClD;EAEYR,8CAAkB,GAA/B,UAAgCC,KAAgB;;;;;;;YAC7B,qBAAMR,UAAU,CAACQ,KAAK,CAAC;;YAAlCQ,QAAQ,GAAGH,SAAuB;YAC5B,qBAAM,IAAI,CAACC,YAAY,CAACE,QAAQ,CAAC;;YAAvCC,GAAG,GAAGJ,SAAiC;YACjB,qBAAMK,OAAO,CAACC,GAAG,CAACpB,EAAE,CAACqB,OAAO,CAACH,GAAG,CAAC,CAACI,GAAG,CAAC,UAAMC,CAAC;cAAA;;;;;sBAC1D,qBAAMA,CAAC,CAACC,IAAI,EAAE;;sBAArBA,IAAI,GAAGV,SAAc;sBAC3BS,CAAC,CAACE,OAAO,EAAE;sBACX,sBAAOD,IAAI;kBAAA;;;aACZ,CAAC,CAAC;;YAJGE,mBAAmB,GAAGZ,SAIzB;YACHI,GAAG,CAACO,OAAO,EAAE;YAEPE,kBAAkB,GAAGD,mBAAmB,CAC3CJ,GAAG,CAAC,sBAAY;cAAI,WAAIlB,eAAe,CAACwB,YAA4B,CAAC;YAAjD,CAAiD,CAAC;YAEzE,sBAAOX,QAAQ,CAACY,YAAY,GACxBF,kBAAkB,GAClBA,kBAAkB,CAAC,CAAC,CAAC;QAAA;;;GAC1B;EAESnB,+CAAmB,GAA7B;IACE,OAAO,uBAAuB;EAChC,CAAC;EAESA,mDAAuB,GAAjC;IACE,OAAO,GAAG;EACZ,CAAC;EAESA,oDAAwB,GAAlC;IACE,OAAO,CAAC;EACV,CAAC;EACH,wBAAC;AAAD,CAAC,CA3CsCL,aAAa","names":["tf","toNetInput","FaceFeatureExtractor","FaceProcessor","FaceExpressions","__extends","faceFeatureExtractor","_super","FaceExpressionNet","input","tidy","softmax","_this","runNet","_a","forwardInput","_b","netInput","out","Promise","all","unstack","map","t","data","dispose","probabilitesByBatch","predictionsByBatch","probabilites","isBatchInput"],"sourceRoot":"","sources":["../../../src/faceExpressionNet/FaceExpressionNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}