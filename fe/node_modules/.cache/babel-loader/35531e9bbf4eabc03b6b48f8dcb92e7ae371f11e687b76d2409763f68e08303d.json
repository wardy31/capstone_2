{"ast":null,"code":"import { mapState } from \"vuex\";\nimport moment from \"moment\";\nimport jspdf from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nexport default {\n  mounted() {\n    this.$store.dispatch(\"generates/getPatient\");\n    this.$store.dispatch(\"disease/getData\");\n    this.$store.dispatch(\"generates/submittedResponse\");\n    this.$store.dispatch(\"generates/getTaggeds\");\n  },\n  filters: {\n    filterDate(val) {\n      return moment(val).format(\"MMM. DD, YYYY\").toString();\n    },\n    filterTime(val) {\n      return moment(val).format(\"hh:mm a\").toString();\n    }\n  },\n  computed: {\n    ...mapState({\n      diseases: state => state.disease.all.data,\n      contacts: state => state.generates.all.data,\n      records: state => state.generates.submit.data,\n      taggeds: state => state.generates.taggeds.data\n    })\n  },\n  data() {\n    return {\n      form_answers: [],\n      form_dialog: false,\n      disease_id: null,\n      date: \"\",\n      closeContact: {\n        disease_id: null,\n        date: \"\",\n        menu: false\n      },\n      hdr: {\n        date: \"\",\n        menu: false\n      },\n      page: 1,\n      menu: false\n    };\n  },\n  methods: {\n    handleQuestion(data) {\n      console.log(data.split(\",\"));\n      if (data.trim()) {\n        const arr = data.split(\",\");\n        return arr;\n      }\n      return [];\n    },\n    handleFormDialog(data) {\n      this.form_answers = data;\n      this.form_dialog = true;\n    },\n    handleDate(data) {\n      console.log(data);\n      this.$store.dispatch(\"generates/getDatePatient\", {\n        date: data\n      });\n      this.menu = false;\n    },\n    handleCloseContactDate(data) {\n      console.log(data);\n      this.$store.dispatch(\"generates/getDateTaggeds\", {\n        date: data\n      });\n      this.closeContact.menu = false;\n    },\n    handleHdrDate(data) {\n      console.log(data);\n      this.$store.dispatch(\"generates/dateResponse\", {\n        date: data\n      });\n      this.hdr[\"menu\"] = false;\n    },\n    handleCloseContactSelect(data) {\n      console.log(\"cc\", data);\n      if (this.closeContact[\"date\"]) {\n        this.$store.dispatch(\"generates/getDateTaggeds\", {\n          date: this.closeContact.date,\n          disease_id: data\n        });\n        return;\n      }\n      this.$store.dispatch(\"generates/getDateTaggeds\", {\n        disease_id: data\n      });\n    },\n    handleSelect(data) {\n      console.log(data);\n      if (this.date) {\n        this.$store.dispatch(\"generates/getDatePatient\", {\n          date: this.date,\n          disease_id: data\n        });\n        return;\n      }\n      this.$store.dispatch(\"generates/getDatePatient\", {\n        disease_id: data\n      });\n    },\n    // Generete Pdf Buttons\n    downloadPatient() {\n      const pdf = new jspdf();\n      const msg = \"Generated Reports\";\n      const content = \"Patient with Close Contacts\";\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 15, msg);\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 22, content);\n\n      // let crement = 0\n\n      for (const i of this.contacts) {\n        // crement +=1\n        // pdf.setFontSize(11);\n        // pdf.setFont(\"courier\");\n        // pdf.text(15 , 38 + crement, `${i.user_account.first_name.toUpperCase()} ${i.user_account?.middle_name ? i.user_account?.middle_name.toUpperCase() : \" \"} ${i.user_account?.last_name.toUpperCase()}`);\n\n        // pdf.setFontSize(11);\n        // pdf.setFont(\"courier\");\n        // pdf.text(15 , 40 + crement, `Created At: ${moment(i.created_at).format(\"MMM. DD, YYYY\").toString()}`);\n        // pdf.text(120, 40 + crement, `Disease Type : ${i.disease.name}`);\n\n        const newMap = i.contacts.map(m => {\n          console.log(\"enter\", m);\n          return {\n            patient: `${m.user_patient.user_account?.first_name.toUpperCase()} ${m.user_patient.user_account?.middle_name.toUpperCase()} ${m.user_patient.user_account?.last_name.toUpperCase()} \\n ${m.user_patient.user_account.classification?.name}`,\n            name: `${m.user_tagged.user_account.first_name.toUpperCase()} ${m.user_tagged.user_account?.middle_name ? m.user_tagged.user_account.middle_name.toUpperCase() : \" \"} ${m.user_tagged.user_account.last_name.toUpperCase()} \\n ${m.user_tagged.user_account.classification.name}`,\n            disease_type: m.user_tagged.disease.name,\n            created_at: moment(m.user_tagged.created_at).format(\"MMM. DD, YYYY\").toString()\n          };\n        });\n        autoTable(pdf, {\n          headStyles: {\n            fillColor: \"#141E61\",\n            font: \"courier\",\n            fontStyle: \"bold\"\n          },\n          columnStyles: {\n            name: {\n              font: \"courier\",\n              valign: \"middle\"\n            },\n            disease_type: {\n              font: \"courier\"\n            },\n            created_at: {\n              font: \"courier\"\n            }\n          },\n          margin: {\n            top: 45\n          },\n          columns: [{\n            header: \"Patient Name\",\n            dataKey: \"patient\"\n          }, {\n            header: \"Close Contacted\",\n            dataKey: \"name\"\n          }, {\n            header: \"Disease Type\",\n            dataKey: \"disease_type\"\n          }, {\n            header: \"Created At\",\n            dataKey: \"created_at\"\n          }],\n          body: newMap\n        });\n      }\n      if (this.date.trim() == \"\" && this.disease_id) {\n        const find = this.diseases.find(f => f.id == this.disease_id);\n        pdf.save(`${find.name}-patient-with-close-contacts.pdf`);\n      } else if (this.date && !this.disease_id) {\n        pdf.save(`${this.date}-patient-with-close-contacts.pdf`);\n      } else if (this.date && this.disease_id) {\n        const find = this.diseases.find(f => f.id == this.disease_id);\n        pdf.save(`${this.date}-${find.name}-patient-with-close-contacts.pdf`);\n      } else {\n        pdf.save(`all-patient-with-close-contacts.pdf`);\n      }\n    },\n    downloadCloseContacts() {\n      const newMap = this.taggeds.map(m => {\n        return {\n          name: `${m.user_account.first_name.toUpperCase()} ${m.user_account?.middle_name ? m.user_account.middle_name.toUpperCase() : \" \"} ${m.user_account.last_name.toUpperCase()} \\t ${m.user_account.classification.name}`,\n          contact_with: `${m.contact_with?.user_patient?.user_account.first_name.toUpperCase()} ${m.contact_with?.user_patient?.user_account?.middle_name ? m.contact_with?.user_patient?.user_account.middle_name.toUpperCase() : \" \"} ${m.contact_with?.user_patient?.user_account.last_name.toUpperCase()} \\t ${m.user_account.classification.name}`,\n          disease_type: m.disease.name,\n          created_at: moment(m.created_at).format(\"MMM. DD, YYYY\").toString()\n        };\n      });\n      const pdf = new jspdf();\n      const msg = \"Generated Reports\";\n      const content = \"Classified Close Contacts\";\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 15, msg);\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 22, content);\n      autoTable(pdf, {\n        headStyles: {\n          fillColor: \"#141E61\"\n        },\n        margin: {\n          top: 45\n        },\n        columns: [{\n          header: \"Name\",\n          dataKey: \"name\"\n        }, {\n          header: \"Contact With\",\n          dataKey: \"contact_with\"\n        }, {\n          header: \"Disease Type\",\n          dataKey: \"disease_type\"\n        }, {\n          header: \"Created At\",\n          dataKey: \"created_at\"\n        }],\n        body: newMap\n      });\n      if (this.closeContact.date.trim() == \"\" && this.closeContact.disease_id) {\n        const find = this.diseases.find(f => f.id == this.closeContact.disease_id);\n        pdf.save(`${find.name}-classified-close-contacts.pdf`);\n      } else if (this.closeContact.date && !this.closeContact.disease_id) {\n        pdf.save(`${this.closeContact.date}-classified-close-contacts.pdf`);\n      } else if (this.closeContact[\"date\"] && this.closeContact.disease_id) {\n        const find = this.diseases.find(f => f.id == this.closeContact.disease_id);\n        pdf.save(`${this.closeContact[\"date\"]}-${find.name}-classified-close-contacts.pdf`);\n      } else {\n        pdf.save(`all-classified-close-contacts.pdf`);\n      }\n    },\n    downloadHDR() {\n      const newMap = this.records.map(m => {\n        let num = 0;\n        const obj = {};\n        for (const key of m.answers) {\n          num += 1;\n          obj[`Question No. ${num}`] = key.answer ? \"True\" : \"False\";\n        }\n        obj[\"time\"] = moment(m.created_at).format(\"hh:mm a\").toString();\n        obj[\"date\"] = moment(m.created_at).format(\"MMM. DD, YYYY\").toString();\n        obj[\"name\"] = `${m.user_account.first_name.toUpperCase()} ${m.user_account?.middle_name ? m.user_account.middle_name.toUpperCase() : \" \"} ${m.user_account.last_name.toUpperCase()}`;\n        return obj;\n      });\n      let numColumns = -1;\n      const columns = [];\n      if (newMap.length) {\n        for (const key of Object.keys(newMap[0]).reverse()) {\n          numColumns += 1;\n          columns[numColumns] = {\n            header: key.toString().toUpperCase(),\n            dataKey: key\n          };\n        }\n      }\n      const pdf = new jspdf();\n      const msg = \"Generated Reports\";\n      const content = \"Health Declaration Responses\";\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 15, msg);\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\");\n      pdf.text(15, 22, content);\n      autoTable(pdf, {\n        headStyles: {\n          fillColor: \"#141E61\"\n        },\n        margin: {\n          top: 45\n        },\n        columns: columns,\n        body: newMap.reverse()\n      });\n      if (this.hdr.date.trim() == \"\") {\n        pdf.save(\"All-HDR.pdf\");\n        return;\n      }\n      pdf.save(`${this.hdr.date}-HD.pdf`);\n    }\n  }\n};","map":{"version":3,"mappings":"AAuWA;AACA;AACA;AACA;AACA;EACAA;IACA;IACA;IACA;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAF;QACAC;QACAE;MACA;MACAC;QACAH;QACAE;MACA;MACAE;MACAF;IACA;EACA;EACAG;IACAC;MACAC;MACA;QACA;QACA;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACAF;MACA;QAAAP;MAAA;MACA;IACA;IACAU;MACAH;MACA;QAAAP;MAAA;MACA;IACA;IACAW;MACAJ;MACA;QAAAP;MAAA;MACA;IACA;IACAY;MACAL;MACA;QACA;UACAP;UACAD;QACA;QACA;MACA;MACA;QAAAA;MAAA;IACA;IACAc;MACAN;MACA;QACA;UACAP;UACAD;QACA;QACA;MACA;MACA;QAAAA;MAAA;IACA;IACA;IACAe;MACA;MACA;MACA;MAEAC;MACAA;MACAA;MAEAA;MACAA;MACAA;;MAEA;;MAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;UACAR;UACA;YACAS,0LACAC,gDACA;YACAC,gEACAD,0CACAA,uDACA,GACA,6DACAA,8CACA;YACAE;YACAC,6CACAC,wBACAC;UACA;QACA;QAEAC;UACAC;YACAC;YACAC;YACAC;UACA;UACAC;YACAV;cAAAQ;cAAAG;YAAA;YACAV;cAAAO;YAAA;YACAN;cAAAM;YAAA;UACA;UACAI;YACAC;UACA;UACAC,UACA;YAAAC;YAAAC;UAAA,GACA;YAAAD;YAAAC;UAAA,GACA;YAAAD;YAAAC;UAAA,GACA;YAAAD;YAAAC;UAAA,EACA;UACAC;QACA;MACA;MAEA;QACA;QACApB;MACA;QACAA;MACA;QACA;QACAA;MACA;QACAA;MACA;IACA;IAEAqB;MACA;QACA;UACAlB,oDACAD,8BACAA,2CACA,GACA,iDACAA,kCACA;UACAoB,wFACApB,0DACAA,uEACA,GACA,6EACAA,kCACA;UACAE;UACAC;QACA;MACA;MAEA;MACA;MACA;MAEAL;MACAA;MACAA;MAEAA;MACAA;MACAA;MAEAQ;QACAC;UAAAC;QAAA;QACAK;UACAC;QACA;QACAC,UACA;UAAAC;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,EACA;QACAC;MACA;MAEA;QACA,gCACAG,0CACA;QACAvB;MACA;QACAA;MACA;QACA,gCACAuB,0CACA;QACAvB,SACA,0EACA;MACA;QACAA;MACA;IACA;IACAwB;MACA;QACA;QACA;QAEA;UACAC;UACAC;QACA;QACAA;QACAA;QACAA,4DACAxB,8BACAA,2CACA,GACA;QACA;MACA;MAEA;MACA;MAEA;QACA;UACAyB;UACAV;YACAC;YACAC;UACA;QACA;MACA;MAEA;MACA;MACA;MAEAnB;MACAA;MACAA;MAEAA;MACAA;MACAA;MAEAQ;QACAC;UAAAC;QAAA;QACAK;UACAC;QACA;QACAC;QACAG;MACA;MAEA;QACApB;QACA;MACA;MAEAA;IACA;EACA;AACA","names":["mounted","filters","filterDate","filterTime","computed","diseases","contacts","records","taggeds","data","form_answers","form_dialog","disease_id","date","closeContact","menu","hdr","page","methods","handleQuestion","console","handleFormDialog","handleDate","handleCloseContactDate","handleHdrDate","handleCloseContactSelect","handleSelect","downloadPatient","pdf","patient","m","name","disease_type","created_at","format","toString","autoTable","headStyles","fillColor","font","fontStyle","columnStyles","valign","margin","top","columns","header","dataKey","body","downloadCloseContacts","contact_with","f","downloadHDR","num","obj","numColumns"],"sourceRoot":"src/views/admin","sources":["ReportGeneration.vue"],"sourcesContent":["<template>\r\n  <v-app>\r\n    <v-main class=\"accent\">\r\n      <div class=\"ma-16\">\r\n        <h2 class=\"primary--text font-weight-bold mt-12 mb-1\">\r\n          Generate Reports\r\n        </h2>\r\n        <h5 class=\"secondary--text\">\r\n          generating reports to downloaded pdf file\r\n        </h5>\r\n\r\n        <v-list class=\"mt-12\" nav>\r\n          <v-list-group :value=\"false\" no-action>\r\n            <template v-slot:activator>\r\n              <v-list-item-title>\r\n                <div\r\n                  class=\"font-weight-bold d-flex align-center justify-space-between\"\r\n                >\r\n                  <h4>Patient with Close Contacts</h4>\r\n                </div></v-list-item-title\r\n              >\r\n            </template>\r\n            <v-card flat width=\"auto\">\r\n              <div class=\"py-4 pl-n6 d-flex justify-space-between\">\r\n                <div class=\"d-flex justify-start width-div\">\r\n                  <v-menu\r\n                    v-model=\"menu\"\r\n                    :close-on-content-click=\"false\"\r\n                    :nudge-right=\"40\"\r\n                    transition=\"scale-transition\"\r\n                    offset-y\r\n                    min-width=\"auto\"\r\n                  >\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                      <v-text-field\r\n                        outlined\r\n                        dense\r\n                        filled\r\n                        v-model=\"date\"\r\n                        label=\"Pick Date\"\r\n                        prepend-icon=\"mdi-calendar\"\r\n                        readonly\r\n                        v-bind=\"attrs\"\r\n                        v-on=\"on\"\r\n                        class=\"ml-n4 mr-3\"\r\n                      ></v-text-field>\r\n                    </template>\r\n                    <v-date-picker\r\n                      v-model=\"date\"\r\n                      @input=\"handleDate\"\r\n                    ></v-date-picker>\r\n                  </v-menu>\r\n\r\n                  <v-select\r\n                    v-model=\"disease_id\"\r\n                    :items=\"diseases\"\r\n                    item-text=\"name\"\r\n                    item-value=\"id\"\r\n                    dense\r\n                    label=\"Disease Type\"\r\n                    outlined\r\n                    filled\r\n                    @input=\"handleSelect\"\r\n                  ></v-select>\r\n                </div>\r\n                <v-btn\r\n                  color=\"primary\"\r\n                  outlined\r\n                  class=\"text-capitalize font-weight-bold pt-5 pb-5\"\r\n                  @click=\"downloadPatient\"\r\n                  ><v-icon class=\"pr-3\">cloud_download</v-icon> Download</v-btn\r\n                >\r\n              </div>\r\n            </v-card>\r\n            <v-simple-table class=\"rounded-lg mb-6\">\r\n              <thead>\r\n                <tr class=\"text-center\">\r\n                  <th class=\"text-left black--text\">Patient Name</th>\r\n\r\n                  <th class=\"text-left black--text\">Disease Type</th>\r\n\r\n                  <th class=\"text-center black--text\">No. of Contacts</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">Created At</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">\r\n                    Check Contacts\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                <tr\r\n                  class=\"text-center\"\r\n                  v-for=\"contact in contacts\"\r\n                  :key=\"contact.id\"\r\n                >\r\n                  <td\r\n                    class=\"text-capitalize text-left font-weight-bold primary--text\"\r\n                  >\r\n                    {{\r\n                      `${contact.user_account.first_name} ${contact.user_account?.middle_name} ${contact.user_account?.last_name}`\r\n                    }}\r\n                    <div class=\"secondary--text font-weight-thin\">\r\n                      {{ contact.user_account.classification[\"name\"] }}\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"text-left\">{{ contact[\"disease\"][\"name\"] }}</td>\r\n                  <td class=\"text-center\">{{ contact[\"contacts\"].length }}</td>\r\n                  <td>{{ contact.created_at | filterDate }}</td>\r\n                  <td>\r\n                    <v-btn\r\n                      color=\"primary\"\r\n                      icon\r\n                      @click=\"\r\n                        $router.push(\r\n                          `/admin/manage/viewtrace/${contact.user_account.id}/${contact.id}`\r\n                        )\r\n                      \"\r\n                      ><v-icon>groups</v-icon></v-btn\r\n                    >\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </v-simple-table>\r\n          </v-list-group>\r\n\r\n          <v-list-group :value=\"false\" no-action>\r\n            <template v-slot:activator>\r\n              <v-list-item-title>\r\n                <div\r\n                  class=\"font-weight-bold d-flex align-center justify-space-between\"\r\n                >\r\n                  <h4>Classified Close Contacts</h4>\r\n                </div></v-list-item-title\r\n              >\r\n            </template>\r\n            <v-card flat width=\"auto\">\r\n              <div class=\"py-4 pl-n6 d-flex justify-space-between\">\r\n                <div class=\"d-flex justify-start width-div\">\r\n                  <v-menu\r\n                    v-model=\"closeContact.menu\"\r\n                    :close-on-content-click=\"false\"\r\n                    :nudge-right=\"40\"\r\n                    transition=\"scale-transition\"\r\n                    offset-y\r\n                    min-width=\"auto\"\r\n                  >\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                      <v-text-field\r\n                        outlined\r\n                        dense\r\n                        filled\r\n                        v-model=\"closeContact.date\"\r\n                        label=\"Pick Date\"\r\n                        prepend-icon=\"mdi-calendar\"\r\n                        readonly\r\n                        v-bind=\"attrs\"\r\n                        v-on=\"on\"\r\n                        class=\"ml-n4 mr-3\"\r\n                      ></v-text-field>\r\n                    </template>\r\n                    <v-date-picker\r\n                      v-model=\"closeContact.date\"\r\n                      @input=\"handleCloseContactDate\"\r\n                    ></v-date-picker>\r\n                  </v-menu>\r\n\r\n                  <v-select\r\n                    v-model=\"closeContact.disease_id\"\r\n                    :items=\"diseases\"\r\n                    item-text=\"name\"\r\n                    item-value=\"id\"\r\n                    dense\r\n                    label=\"Disease Type\"\r\n                    outlined\r\n                    filled\r\n                    @input=\"handleCloseContactSelect\"\r\n                  ></v-select>\r\n                </div>\r\n                <v-btn\r\n                  color=\"primary\"\r\n                  outlined\r\n                  class=\"text-capitalize font-weight-bold pt-5 pb-5\"\r\n                  @click=\"downloadCloseContacts\"\r\n                  ><v-icon class=\"pr-3\">cloud_download</v-icon> Download</v-btn\r\n                >\r\n              </div>\r\n            </v-card>\r\n            <v-simple-table class=\"rounded-lg mb-6\">\r\n              <thead>\r\n                <tr class=\"text-center\">\r\n                  <th class=\"text-left black--text\">Name</th>\r\n\r\n                  <th class=\"text-left black--text\">Contact with</th>\r\n\r\n                  <th class=\"text-left black--text\">Disease Type</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">Created At</th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                <tr\r\n                  class=\"text-center\"\r\n                  v-for=\"tagged in taggeds\"\r\n                  :key=\"tagged.id\"\r\n                >\r\n                  <td\r\n                    class=\"text-capitalize text-left font-weight-bold primary--text\"\r\n                  >\r\n                    {{\r\n                      `${tagged.user_account.first_name} ${tagged.user_account?.middle_name} ${tagged.user_account?.last_name}`\r\n                    }}\r\n                    <div class=\"secondary--text font-weight-thin\">\r\n                      {{ tagged.user_account.classification[\"name\"] }}\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"text-left text-capitalize font-weight-bold\">\r\n                    {{\r\n                      `${tagged[\"contact_with\"]?.user_patient?.user_account?.first_name} ${tagged[\"contact_with\"]?.user_patient?.user_account?.middle_name}  ${tagged[\"contact_with\"]?.user_patient?.user_account?.last_name}`\r\n                    }}\r\n                    <div class=\"secondary--text font-weight-thin\">\r\n                      {{\r\n                        tagged[\"contact_with\"]?.user_patient?.user_account\r\n                          ?.classification?.name\r\n                      }}\r\n                    </div>\r\n                  </td>\r\n                  <td class=\"text-left\">{{ tagged.disease[\"name\"] }}</td>\r\n                  <td class=\"text-center\">\r\n                    {{ tagged.created_at | filterDate }}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </v-simple-table>\r\n          </v-list-group>\r\n\r\n          <!-- Follow Up Recoreds -->\r\n          <v-list-group :value=\"false\" no-action>\r\n            <template v-slot:activator>\r\n              <v-list-item-title>\r\n                <div\r\n                  class=\"font-weight-bold d-flex align-center justify-space-between\"\r\n                >\r\n                  <h4>Health Declaration Reponses</h4>\r\n                </div></v-list-item-title\r\n              >\r\n            </template>\r\n            <v-card flat>\r\n              <div class=\"py-4 pl-n6 d-flex justify-space-between\">\r\n                <div class=\"d-flex justify-start width-div\">\r\n                  <v-menu\r\n                    v-model=\"hdr['menu']\"\r\n                    :close-on-content-click=\"false\"\r\n                    :nudge-right=\"40\"\r\n                    transition=\"scale-transition\"\r\n                    offset-y\r\n                    min-width=\"auto\"\r\n                  >\r\n                    <template v-slot:activator=\"{ on, attrs }\">\r\n                      <v-text-field\r\n                        outlined\r\n                        dense\r\n                        filled\r\n                        v-model=\"hdr['date']\"\r\n                        label=\"Pick Date\"\r\n                        prepend-icon=\"mdi-calendar\"\r\n                        readonly\r\n                        v-bind=\"attrs\"\r\n                        v-on=\"on\"\r\n                        class=\"ml-n4 mr-3\"\r\n                      ></v-text-field>\r\n                    </template>\r\n                    <v-date-picker\r\n                      v-model=\"hdr['date']\"\r\n                      @input=\"handleHdrDate\"\r\n                    ></v-date-picker>\r\n                  </v-menu>\r\n                </div>\r\n                <v-btn\r\n                  color=\"primary\"\r\n                  outlined\r\n                  class=\"text-capitalize font-weight-bold pt-5 pb-5\"\r\n                  @click=\"downloadHDR\"\r\n                  ><v-icon class=\"pr-3\">cloud_download</v-icon> Download</v-btn\r\n                >\r\n              </div>\r\n            </v-card>\r\n            <v-simple-table class=\"rounded-lg mb-6\">\r\n              <thead>\r\n                <tr class=\"text-center\">\r\n                  <th class=\"text-left black--text\">Name</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">Date</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">Time</th>\r\n\r\n                  <th class=\"text-left black--text text-center\">\r\n                    Check Response\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                <tr\r\n                  class=\"text-center\"\r\n                  v-for=\"record in records\"\r\n                  :key=\"record.id\"\r\n                >\r\n                  <td\r\n                    class=\"text-left font-weight-bold primary--text text-capitalize\"\r\n                  >\r\n                    {{\r\n                      `${record.user_account[\"first_name\"]} ${record.user_account?.middle_name} ${record.user_account?.last_name}`\r\n                    }}\r\n                    <div class=\"font-weight-thin secondary--text\">\r\n                      {{ record[\"user_account\"][\"classification\"][\"name\"] }}\r\n                    </div>\r\n                  </td>\r\n                  <td>{{ record.created_at | filterDate }}</td>\r\n                  <td>{{ record.created_at | filterTime }}</td>\r\n                  <td>\r\n                    <v-btn color=\"primary\" icon\r\n                    @click=\"handleFormDialog(record.answers)\"\r\n                      ><v-icon>description</v-icon></v-btn\r\n                    >\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </v-simple-table>\r\n          </v-list-group>\r\n        </v-list>\r\n      </div>\r\n    </v-main>\r\n    <!-- Form Dialog -->\r\n    <v-dialog v-model=\"form_dialog\" @click:outside=\"form_dialog = false\" width=\"540\">\r\n      <v-card v-for=\"(response,index) in form_answers\" :key=\"response.id\" tile>\r\n        <v-card-title primary-title class=\"text-justify\">\r\n          <h6>{{ `${index + 1}. ${response.question.question}` }}</h6>\r\n        </v-card-title>\r\n\r\n        <v-card-text>\r\n          <ul v-if=\"response.question.sub_question\" class=\"mt-n4\">\r\n            <li v-for=\"(q,index) in handleQuestion(response.question.sub_question)\" :key=\"index\">\r\n              <h4>{{q}}</h4>          \r\n            </li>\r\n          </ul>\r\n\r\n          <div class=\"mt-4\">\r\n            <v-text-field outlined readonly label=\"Answer\" :value=\"response.answer == 1 ? `True` : `False`\"></v-text-field>\r\n          </div>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-dialog>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from \"vuex\";\r\nimport moment from \"moment\";\r\nimport jspdf from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nexport default {\r\n  mounted() {\r\n    this.$store.dispatch(\"generates/getPatient\");\r\n    this.$store.dispatch(\"disease/getData\");\r\n    this.$store.dispatch(\"generates/submittedResponse\");\r\n    this.$store.dispatch(\"generates/getTaggeds\");\r\n  },\r\n  filters: {\r\n    filterDate(val) {\r\n      return moment(val).format(\"MMM. DD, YYYY\").toString();\r\n    },\r\n    filterTime(val) {\r\n      return moment(val).format(\"hh:mm a\").toString();\r\n    },\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      diseases: (state) => state.disease.all.data,\r\n      contacts: (state) => state.generates.all.data,\r\n      records: (state) => state.generates.submit.data,\r\n      taggeds: (state) => state.generates.taggeds.data,\r\n    }),\r\n  },\r\n  data() {\r\n    return {\r\n      form_answers:[],\r\n      form_dialog:false,\r\n      disease_id: null,\r\n      date: \"\",\r\n      closeContact: {\r\n        disease_id: null,\r\n        date: \"\",\r\n        menu: false,\r\n      },\r\n      hdr: {\r\n        date: \"\",\r\n        menu: false,\r\n      },\r\n      page: 1,\r\n      menu: false,\r\n    };\r\n  },\r\n  methods: {\r\n    handleQuestion(data){\r\n      console.log(data.split(\",\"));\r\n      if(data.trim()){\r\n        const arr = data.split(\",\")\r\n        return arr\r\n      }\r\n      return []\r\n    },\r\n    handleFormDialog(data){\r\n      this.form_answers = data\r\n      this.form_dialog =  true\r\n    },\r\n    handleDate(data) {\r\n      console.log(data);\r\n      this.$store.dispatch(\"generates/getDatePatient\", { date: data });\r\n      this.menu = false;\r\n    },\r\n    handleCloseContactDate(data) {\r\n      console.log(data);\r\n      this.$store.dispatch(\"generates/getDateTaggeds\", { date: data });\r\n      this.closeContact.menu = false;\r\n    },\r\n    handleHdrDate(data) {\r\n      console.log(data);\r\n      this.$store.dispatch(\"generates/dateResponse\", { date: data });\r\n      this.hdr[\"menu\"] = false;\r\n    },\r\n    handleCloseContactSelect(data) {\r\n      console.log(\"cc\", data);\r\n      if (this.closeContact[\"date\"]) {\r\n        this.$store.dispatch(\"generates/getDateTaggeds\", {\r\n          date: this.closeContact.date,\r\n          disease_id: data,\r\n        });\r\n        return;\r\n      }\r\n      this.$store.dispatch(\"generates/getDateTaggeds\", { disease_id: data });\r\n    },\r\n    handleSelect(data) {\r\n      console.log(data);\r\n      if (this.date) {\r\n        this.$store.dispatch(\"generates/getDatePatient\", {\r\n          date: this.date,\r\n          disease_id: data,\r\n        });\r\n        return;\r\n      }\r\n      this.$store.dispatch(\"generates/getDatePatient\", { disease_id: data });\r\n    },\r\n    // Generete Pdf Buttons\r\n    downloadPatient() {\r\n      const pdf = new jspdf();\r\n      const msg = \"Generated Reports\";\r\n      const content = \"Patient with Close Contacts\";\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 15, msg);\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 22, content);\r\n\r\n      // let crement = 0\r\n\r\n      for (const i of this.contacts) {\r\n        // crement +=1\r\n        // pdf.setFontSize(11);\r\n        // pdf.setFont(\"courier\");\r\n        // pdf.text(15 , 38 + crement, `${i.user_account.first_name.toUpperCase()} ${i.user_account?.middle_name ? i.user_account?.middle_name.toUpperCase() : \" \"} ${i.user_account?.last_name.toUpperCase()}`);\r\n\r\n        // pdf.setFontSize(11);\r\n        // pdf.setFont(\"courier\");\r\n        // pdf.text(15 , 40 + crement, `Created At: ${moment(i.created_at).format(\"MMM. DD, YYYY\").toString()}`);\r\n        // pdf.text(120, 40 + crement, `Disease Type : ${i.disease.name}`);\r\n\r\n        const newMap = i.contacts.map((m) => {\r\n          console.log(\"enter\", m);\r\n          return {\r\n            patient: `${m.user_patient.user_account?.first_name.toUpperCase()} ${m.user_patient.user_account?.middle_name.toUpperCase()} ${m.user_patient.user_account?.last_name.toUpperCase()} \\n ${\r\n              m.user_patient.user_account.classification?.name\r\n            }`,\r\n            name: `${m.user_tagged.user_account.first_name.toUpperCase()} ${\r\n              m.user_tagged.user_account?.middle_name\r\n                ? m.user_tagged.user_account.middle_name.toUpperCase()\r\n                : \" \"\r\n            } ${m.user_tagged.user_account.last_name.toUpperCase()} \\n ${\r\n              m.user_tagged.user_account.classification.name\r\n            }`,\r\n            disease_type: m.user_tagged.disease.name,\r\n            created_at: moment(m.user_tagged.created_at)\r\n              .format(\"MMM. DD, YYYY\")\r\n              .toString(),\r\n          };\r\n        });\r\n\r\n        autoTable(pdf, {\r\n          headStyles: {\r\n            fillColor: \"#141E61\",\r\n            font: \"courier\",\r\n            fontStyle: \"bold\",\r\n          },\r\n          columnStyles: {\r\n            name: { font: \"courier\", valign: \"middle\" },\r\n            disease_type: { font: \"courier\" },\r\n            created_at: { font: \"courier\" },\r\n          },\r\n          margin: {\r\n            top: 45,\r\n          },\r\n          columns: [\r\n            { header: \"Patient Name\", dataKey: \"patient\" },\r\n            { header: \"Close Contacted\", dataKey: \"name\" },\r\n            { header: \"Disease Type\", dataKey: \"disease_type\" },\r\n            { header: \"Created At\", dataKey: \"created_at\" },\r\n          ],\r\n          body: newMap,\r\n        });\r\n      }\r\n\r\n      if (this.date.trim() == \"\" && this.disease_id) {\r\n        const find = this.diseases.find((f) => f.id == this.disease_id);\r\n        pdf.save(`${find.name}-patient-with-close-contacts.pdf`);\r\n      } else if (this.date && !this.disease_id) {\r\n        pdf.save(`${this.date}-patient-with-close-contacts.pdf`);\r\n      } else if (this.date && this.disease_id) {\r\n        const find = this.diseases.find((f) => f.id == this.disease_id);\r\n        pdf.save(`${this.date}-${find.name}-patient-with-close-contacts.pdf`);\r\n      } else {\r\n        pdf.save(`all-patient-with-close-contacts.pdf`);\r\n      }\r\n    },\r\n\r\n    downloadCloseContacts() {\r\n      const newMap = this.taggeds.map((m) => {\r\n        return {\r\n          name: `${m.user_account.first_name.toUpperCase()} ${\r\n            m.user_account?.middle_name\r\n              ? m.user_account.middle_name.toUpperCase()\r\n              : \" \"\r\n          } ${m.user_account.last_name.toUpperCase()} \\t ${\r\n            m.user_account.classification.name\r\n          }`,\r\n          contact_with: `${m.contact_with?.user_patient?.user_account.first_name.toUpperCase()} ${\r\n            m.contact_with?.user_patient?.user_account?.middle_name\r\n              ? m.contact_with?.user_patient?.user_account.middle_name.toUpperCase()\r\n              : \" \"\r\n          } ${m.contact_with?.user_patient?.user_account.last_name.toUpperCase()} \\t ${\r\n            m.user_account.classification.name\r\n          }`,\r\n          disease_type: m.disease.name,\r\n          created_at: moment(m.created_at).format(\"MMM. DD, YYYY\").toString(),\r\n        };\r\n      });\r\n\r\n      const pdf = new jspdf();\r\n      const msg = \"Generated Reports\";\r\n      const content = \"Classified Close Contacts\";\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 15, msg);\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 22, content);\r\n\r\n      autoTable(pdf, {\r\n        headStyles: { fillColor: \"#141E61\" },\r\n        margin: {\r\n          top: 45,\r\n        },\r\n        columns: [\r\n          { header: \"Name\", dataKey: \"name\" },\r\n          { header: \"Contact With\", dataKey: \"contact_with\" },\r\n          { header: \"Disease Type\", dataKey: \"disease_type\" },\r\n          { header: \"Created At\", dataKey: \"created_at\" },\r\n        ],\r\n        body: newMap,\r\n      });\r\n\r\n      if (this.closeContact.date.trim() == \"\" && this.closeContact.disease_id) {\r\n        const find = this.diseases.find(\r\n          (f) => f.id == this.closeContact.disease_id\r\n        );\r\n        pdf.save(`${find.name}-classified-close-contacts.pdf`);\r\n      } else if (this.closeContact.date && !this.closeContact.disease_id) {\r\n        pdf.save(`${this.closeContact.date}-classified-close-contacts.pdf`);\r\n      } else if (this.closeContact[\"date\"] && this.closeContact.disease_id) {\r\n        const find = this.diseases.find(\r\n          (f) => f.id == this.closeContact.disease_id\r\n        );\r\n        pdf.save(\r\n          `${this.closeContact[\"date\"]}-${find.name}-classified-close-contacts.pdf`\r\n        );\r\n      } else {\r\n        pdf.save(`all-classified-close-contacts.pdf`);\r\n      }\r\n    },\r\n    downloadHDR() {\r\n      const newMap = this.records.map((m) => {\r\n        let num = 0;\r\n        const obj = {};\r\n\r\n        for (const key of m.answers) {\r\n          num += 1;\r\n          obj[`Question No. ${num}`] = key.answer ? \"True\" : \"False\";\r\n        }\r\n        obj[\"time\"] = moment(m.created_at).format(\"hh:mm a\").toString();\r\n        obj[\"date\"] = moment(m.created_at).format(\"MMM. DD, YYYY\").toString();\r\n        obj[\"name\"] = `${m.user_account.first_name.toUpperCase()} ${\r\n          m.user_account?.middle_name\r\n            ? m.user_account.middle_name.toUpperCase()\r\n            : \" \"\r\n        } ${m.user_account.last_name.toUpperCase()}`;\r\n        return obj;\r\n      });\r\n\r\n      let numColumns = -1;\r\n      const columns = [];\r\n\r\n      if (newMap.length) {\r\n        for (const key of Object.keys(newMap[0]).reverse()) {\r\n          numColumns += 1;\r\n          columns[numColumns] = {\r\n            header: key.toString().toUpperCase(),\r\n            dataKey: key,\r\n          };\r\n        }\r\n      }\r\n\r\n      const pdf = new jspdf();\r\n      const msg = \"Generated Reports\";\r\n      const content = \"Health Declaration Responses\";\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 15, msg);\r\n\r\n      pdf.setFontSize(16);\r\n      pdf.setFont(\"helvetica\");\r\n      pdf.text(15, 22, content);\r\n\r\n      autoTable(pdf, {\r\n        headStyles: { fillColor: \"#141E61\" },\r\n        margin: {\r\n          top: 45,\r\n        },\r\n        columns: columns,\r\n        body: newMap.reverse(),\r\n      });\r\n\r\n      if (this.hdr.date.trim() == \"\") {\r\n        pdf.save(\"All-HDR.pdf\");\r\n        return;\r\n      }\r\n\r\n      pdf.save(`${this.hdr.date}-HD.pdf`);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bg {\r\n  background-color: #f8f0f0;\r\n}\r\n.adj {\r\n  width: 280px;\r\n}\r\n.width-div {\r\n  width: 460px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}