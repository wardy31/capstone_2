{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nimport { emits } from \"@/config/webSocket\";\nexport default {\n  // updated(){\n  //   if(this.exists){\n  //     this.existData.forEach((element,index) => {\n  //       console.log('le',element.answer, index);\n  //       this.answer.push(element.answer)\n  //     });\n  //   }\n  // },\n  async mounted() {\n    this.$store.dispatch(\"followUps/checkFollowUp\");\n    await this.$store.dispatch(\"declaration/getQuestions\");\n    await this.$store.dispatch(\"declaration/checkExist\");\n  },\n  computed: {\n    ...mapState({\n      loading: state => state.declaration.submit.loading,\n      loadingForm: state => state.declaration.all.loading,\n      questionnaires: state => state.declaration.all.data,\n      existData: state => state.declaration.existForm.data,\n      exists: state => state.declaration.existForm.exist,\n      checkContact: state => state.followUps.check.data\n    })\n  },\n  data() {\n    return {\n      answer: [],\n      displayAnswer: [],\n      questionnaire_id: [],\n      error: false,\n      all: []\n    };\n  },\n  methods: {\n    checkDays() {\n      let taggedHasDays = false;\n      let patientHasDays = false;\n      for (const iterator of this.checkContact.data[0]?.user_tagged) {\n        if (iterator.days_left != 0) {\n          taggedHasDays = true;\n        }\n      }\n      for (const iterator of this.checkContact.data[0]?.user_patient) {\n        if (iterator.days_left != 0) {\n          patientHasDays = true;\n        }\n      }\n      return taggedHasDays || patientHasDays;\n    },\n    submitForm() {\n      this.$store.dispatch(\"declaration/submitForm\", this.answers);\n    },\n    async submit() {\n      if (this.answer.length == 0) {\n        console.log(\"zero\");\n        this.error = true;\n        return this.answer.length == 0;\n      }\n      for (const value of this.answer) {\n        if (value == undefined || value == null || this.questionnaires.length > this.answer.length || this.answer.length == 0) {\n          console.log(\"w\");\n          this.error = true;\n          return null;\n        }\n      }\n      this.answer.forEach((element, index) => {\n        this.all.push({\n          questionnaire_id: this.questionnaire_id[index],\n          answer: element == \"true\" ? true : false\n        });\n      });\n      console.log(this.all);\n      const res = await this.$store.dispatch(\"declaration/submitForm\", this.all);\n      if (res) {\n        emits();\n      }\n      this.reset();\n    },\n    edit() {\n      this.$store.state.declaration.existForm.exist = false;\n    },\n    reset() {\n      this.all = [];\n      this.answer = [];\n      this.questionnaire_id = [];\n    }\n  }\n};","map":{"version":3,"mappings":";AAyKA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA;IACA;IACA;EACA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;MAEA;QACA;UACAC;QACA;MACA;MAEA;QACA;UACAC;QACA;MACA;MAEA;IACA;IACAC;MACA;IACA;IACA;MACA;QACAC;QACA;QACA;MACA;MAEA;QACA,IACAC,sBACAA,iBACA,mDACA,yBACA;UACAD;UACA;UACA;QACA;MACA;MACA;QACA;UACAR;UACAF;QACA;MACA;MAEAU;MACA,uCACA,0BACA,SACA;MACA;QACAE;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;EACA;AACA","names":["computed","loading","loadingForm","questionnaires","existData","exists","checkContact","data","answer","displayAnswer","questionnaire_id","error","all","methods","checkDays","taggedHasDays","patientHasDays","submitForm","console","value","emits","edit","reset"],"sourceRoot":"src/views/user/pages","sources":["HealthDeclarationForm.vue"],"sourcesContent":["<template>\r\n  <v-app>\r\n    <v-main class=\"accent\">\r\n      <div v-if=\"checkDays()\">\r\n        <v-container>\r\n          <div class=\"text-center mt-12\">\r\n            <v-avatar size=\"240\" tile>\r\n              <img :src=\"require('@/assets/relax.svg')\" alt=\"alt\" />\r\n            </v-avatar>\r\n            <div class=\"primary--text mt-4 font-weight-bold text-h5 text-lg-h4\">\r\n              Sorry!\r\n            </div>\r\n            <div class=\"text-body-1 mt-2\">\r\n              you are temporarily cannot access this feature.\r\n            </div>\r\n          </div>\r\n        </v-container>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <v-container v-if=\"questionnaires.length == 0 || loading\">\r\n          <div class=\"mx-auto mx-lg-16\">\r\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\r\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\r\n            <v-skeleton-loader type=\"card\" class=\"mb-12\"></v-skeleton-loader>\r\n          </div>\r\n        </v-container>\r\n\r\n        <v-container>\r\n          <div class=\"mx-auto mx-lg-16\" v-if=\"exists\">\r\n            <h2 class=\"primary--text font-weight-bold mt-4 mt-lg-12 mb-1\">\r\n              Health Declaration Form\r\n            </h2>\r\n            <h5 class=\"secondary--text\">Filled Up Form</h5>\r\n\r\n            <v-alert\r\n              type=\"success\"\r\n              color=\"primary\"\r\n              :value=\"true\"\r\n              text\r\n              info\r\n              class=\"mt-8 text-body-2\"\r\n              prominent\r\n              outlined\r\n              dense\r\n            >\r\n              Thank you for submitting your response. The form will be active\r\n              tomorrow.\r\n            </v-alert>\r\n\r\n            <div class=\"d-flex justify-center mt-16 mt-lg-12\">\r\n              <v-avatar :size=\"$vuetify.breakpoint.mobile ? 180 : 260\" tile>\r\n                <img src=\"@/assets/completed.svg\" alt=\"\" />\r\n              </v-avatar>\r\n            </div>\r\n            <!-- <v-card\r\n            class=\"mt-8\"\r\n            v-for=\"existed in existData\"\r\n            :key=\"existed.id\"\r\n            :disabled=\"exists\"\r\n          >\r\n            <v-card-title\r\n              class=\"text-body-1 black--text font-weight-bold text-justify\"\r\n            >\r\n              {{ existed.question.question }}\r\n            </v-card-title>\r\n            <v-card-text v-if=\"existed.question.sub_question\">\r\n              <div>\r\n                <ul\r\n                  class=\"black--text text-body-2 text-capitalize\"\r\n                  v-for=\"splits in existed.question.sub_question.split(',')\"\r\n                  :key=\"splits\"\r\n                >\r\n                  <li class=\"mb-1\">{{ splits }}</li>\r\n                </ul>\r\n              </div>\r\n            </v-card-text>\r\n            <v-card-actions>\r\n              <h4 class=\"mx-4 my-3\">\r\n                Answer :\r\n                <b class=\"ml-2 primary--text\">{{\r\n                  existed.answer ? \"Yes\" : \"No\"\r\n                }}</b>\r\n              </h4>\r\n            </v-card-actions>\r\n          </v-card>\r\n          <v-btn\r\n            class=\"text-capitalize mt-12 py-lg-4 py-2 font-weight-bold\"\r\n            :block=\"$vuetify.breakpoint.mobile\"\r\n            color=\"primary\"\r\n            :loading=\"loading\"\r\n            @click=\"edit\"\r\n            >Edit Form</v-btn\r\n          > -->\r\n          </div>\r\n\r\n          <div class=\"mx-auto mx-lg-16\" v-else>\r\n            <h2 class=\"primary--text font-weight-bold mt-4 mt-lg-12 mb-1\">\r\n              Health Declaration Form\r\n            </h2>\r\n            <h5 class=\"secondary--text\">Filled Up Form</h5>\r\n            <v-card\r\n              class=\"mt-8\"\r\n              v-for=\"(question, index) in questionnaires\"\r\n              :key=\"question.id\"\r\n            >\r\n              <v-card-title\r\n                class=\"text-body-1 black--text font-weight-bold text-justify\"\r\n              >\r\n                {{ question.question }}\r\n              </v-card-title>\r\n              <v-card-text v-if=\"question.sub_question\">\r\n                <div>\r\n                  <ul\r\n                    class=\"black--text text-body-2 text-capitalize\"\r\n                    v-for=\"splits in question.sub_question.split(',')\"\r\n                    :key=\"splits\"\r\n                  >\r\n                    <li class=\"mb-1\">{{ splits }}</li>\r\n                  </ul>\r\n                </div>\r\n              </v-card-text>\r\n              <v-card-actions class=\"ml-2 mt-n4\">\r\n                <v-checkbox\r\n                  label=\"Yes\"\r\n                  @click=\"questionnaire_id[index] = question.id\"\r\n                  v-model=\"answer[index]\"\r\n                  value=\"true\"\r\n                  class=\"mr-4\"\r\n                ></v-checkbox>\r\n                <v-checkbox\r\n                  label=\"No\"\r\n                  @click=\"questionnaire_id[index] = question.id\"\r\n                  v-model=\"answer[index]\"\r\n                  value=\"false\"\r\n                ></v-checkbox>\r\n              </v-card-actions>\r\n            </v-card>\r\n\r\n            <v-btn\r\n              class=\"text-capitalize mt-6 py-6 font-weight-bold\"\r\n              block\r\n              color=\"primary\"\r\n              :loading=\"loading\"\r\n              @click=\"submit\"\r\n              >Submit Form</v-btn\r\n            >\r\n\r\n            <v-btn\r\n              color=\"black\"\r\n              class=\"text-capitalize mt-2 font-weight-bold\"\r\n              text\r\n              plain\r\n              @click=\"reset\"\r\n              block\r\n              >Reset</v-btn\r\n            >\r\n          </div>\r\n        </v-container>\r\n      </div>\r\n      <v-snackbar v-model=\"error\" color=\"red\" right bottom timeout=\"2000\" app>\r\n        <v-icon left>error</v-icon>\r\n        Please Filled Up All Questions\r\n      </v-snackbar>\r\n    </v-main>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from \"vuex\";\r\nimport { emits } from \"@/config/webSocket\";\r\nexport default {\r\n  // updated(){\r\n  //   if(this.exists){\r\n  //     this.existData.forEach((element,index) => {\r\n  //       console.log('le',element.answer, index);\r\n  //       this.answer.push(element.answer)\r\n  //     });\r\n  //   }\r\n  // },\r\n  async mounted() {\r\n    this.$store.dispatch(\"followUps/checkFollowUp\");\r\n    await this.$store.dispatch(\"declaration/getQuestions\");\r\n    await this.$store.dispatch(\"declaration/checkExist\");\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      loading: (state) => state.declaration.submit.loading,\r\n      loadingForm: (state) => state.declaration.all.loading,\r\n      questionnaires: (state) => state.declaration.all.data,\r\n      existData: (state) => state.declaration.existForm.data,\r\n      exists: (state) => state.declaration.existForm.exist,\r\n      checkContact: (state) => state.followUps.check.data,\r\n    }),\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      answer: [],\r\n      displayAnswer: [],\r\n      questionnaire_id: [],\r\n      error: false,\r\n      all: [],\r\n    };\r\n  },\r\n  methods: {\r\n    checkDays() {\r\n      let taggedHasDays = false;\r\n      let patientHasDays = false;\r\n\r\n      for (const iterator of this.checkContact.data[0]?.user_tagged) {\r\n        if (iterator.days_left != 0) {\r\n          taggedHasDays = true;\r\n        }\r\n      }\r\n\r\n      for (const iterator of this.checkContact.data[0]?.user_patient) {\r\n        if (iterator.days_left != 0) {\r\n          patientHasDays = true;\r\n        }\r\n      }\r\n\r\n      return taggedHasDays || patientHasDays;\r\n    },\r\n    submitForm() {\r\n      this.$store.dispatch(\"declaration/submitForm\", this.answers);\r\n    },\r\n    async submit() {\r\n      if (this.answer.length == 0) {\r\n        console.log(\"zero\");\r\n        this.error = true;\r\n        return this.answer.length == 0;\r\n      }\r\n\r\n      for (const value of this.answer) {\r\n        if (\r\n          value == undefined ||\r\n          value == null ||\r\n          this.questionnaires.length > this.answer.length ||\r\n          this.answer.length == 0\r\n        ) {\r\n          console.log(\"w\");\r\n          this.error = true;\r\n          return null;\r\n        }\r\n      }\r\n      this.answer.forEach((element, index) => {\r\n        this.all.push({\r\n          questionnaire_id: this.questionnaire_id[index],\r\n          answer: element == \"true\" ? true : false,\r\n        });\r\n      });\r\n\r\n      console.log(this.all);\r\n      const res = await this.$store.dispatch(\r\n        \"declaration/submitForm\",\r\n        this.all\r\n      );\r\n      if (res) {\r\n        emits();\r\n      }\r\n      this.reset();\r\n    },\r\n    edit() {\r\n      this.$store.state.declaration.existForm.exist = false;\r\n    },\r\n    reset() {\r\n      this.all = [];\r\n      this.answer = [];\r\n      this.questionnaire_id = [];\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}