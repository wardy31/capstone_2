{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { nonMaxSuppression } from '../ops';\nimport { extractImagePatches } from './extractImagePatches';\nimport { MtcnnBox } from './MtcnnBox';\nimport { RNet } from './RNet';\nexport function stage2(img, inputBoxes, scoreThreshold, params, stats) {\n  return __awaiter(this, void 0, void 0, function () {\n    var ts, rnetInputs, rnetOuts, scoresTensor, scores, _a, _b, indices, filteredBoxes, filteredScores, finalBoxes, finalScores, indicesNms, regions_1;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          ts = Date.now();\n          return [4 /*yield*/, extractImagePatches(img, inputBoxes, {\n            width: 24,\n            height: 24\n          })];\n        case 1:\n          rnetInputs = _c.sent();\n          stats.stage2_extractImagePatches = Date.now() - ts;\n          ts = Date.now();\n          rnetOuts = rnetInputs.map(function (rnetInput) {\n            var out = RNet(rnetInput, params);\n            rnetInput.dispose();\n            return out;\n          });\n          stats.stage2_rnet = Date.now() - ts;\n          scoresTensor = rnetOuts.length > 1 ? tf.concat(rnetOuts.map(function (out) {\n            return out.scores;\n          })) : rnetOuts[0].scores;\n          _b = (_a = Array).from;\n          return [4 /*yield*/, scoresTensor.data()];\n        case 2:\n          scores = _b.apply(_a, [_c.sent()]);\n          scoresTensor.dispose();\n          indices = scores.map(function (score, idx) {\n            return {\n              score: score,\n              idx: idx\n            };\n          }).filter(function (c) {\n            return c.score > scoreThreshold;\n          }).map(function (_a) {\n            var idx = _a.idx;\n            return idx;\n          });\n          filteredBoxes = indices.map(function (idx) {\n            return inputBoxes[idx];\n          });\n          filteredScores = indices.map(function (idx) {\n            return scores[idx];\n          });\n          finalBoxes = [];\n          finalScores = [];\n          if (filteredBoxes.length > 0) {\n            ts = Date.now();\n            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7);\n            stats.stage2_nms = Date.now() - ts;\n            regions_1 = indicesNms.map(function (idx) {\n              var regionsData = rnetOuts[indices[idx]].regions.arraySync();\n              return new MtcnnBox(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);\n            });\n            finalScores = indicesNms.map(function (idx) {\n              return filteredScores[idx];\n            });\n            finalBoxes = indicesNms.map(function (idx, i) {\n              return filteredBoxes[idx].calibrate(regions_1[i]);\n            });\n          }\n          rnetOuts.forEach(function (t) {\n            t.regions.dispose();\n            t.scores.dispose();\n          });\n          return [2 /*return*/, {\n            boxes: finalBoxes,\n            scores: finalScores\n          }];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAG3C,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,IAAI,QAAQ,QAAQ;AAG7B,OAAM,SAAgBC,MAAM,CAC1BC,GAAsB,EACtBC,UAAiB,EACjBC,cAAsB,EACtBC,MAAkB,EAClBC,KAAU;;;;;;UAGNC,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE;UACA,qBAAMX,mBAAmB,CAACI,GAAG,EAAEC,UAAU,EAAE;YAAEO,KAAK,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAE,CAAE,CAAC;;UAAlFC,UAAU,GAAGC,SAAqE;UACxFP,KAAK,CAACQ,0BAA0B,GAAGN,IAAI,CAACC,GAAG,EAAE,GAAGF,EAAE;UAElDA,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE;UACTM,QAAQ,GAAGH,UAAU,CAACI,GAAG,CAC7B,mBAAS;YACP,IAAMC,GAAG,GAAGjB,IAAI,CAACkB,SAAS,EAAEb,MAAM,CAAC;YACnCa,SAAS,CAACC,OAAO,EAAE;YACnB,OAAOF,GAAG;UACZ,CAAC,CACF;UACDX,KAAK,CAACc,WAAW,GAAGZ,IAAI,CAACC,GAAG,EAAE,GAAGF,EAAE;UAE7Bc,YAAY,GAAGN,QAAQ,CAACO,MAAM,GAAG,CAAC,GACpC1B,EAAE,CAAC2B,MAAM,CAACR,QAAQ,CAACC,GAAG,CAAC,aAAG;YAAI,UAAG,CAACQ,MAAM;UAAV,CAAU,CAAC,CAAC,GAC1CT,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM;UACPC,gBAAK,EAACC,IAAI;UAAC,qBAAML,YAAY,CAACM,IAAI,EAAE;;UAA7CH,MAAM,GAAGC,cAAWZ,SAAyB,EAAC;UACpDQ,YAAY,CAACF,OAAO,EAAE;UAEhBS,OAAO,GAAGJ,MAAM,CACnBR,GAAG,CAAC,UAACa,KAAK,EAAEC,GAAG;YAAK,OAAC;cAAED,KAAK;cAAEC,GAAG;YAAA,CAAE;UAAf,CAAgB,CAAC,CACrCC,MAAM,CAAC,WAAC;YAAI,QAAC,CAACF,KAAK,GAAGzB,cAAc;UAAxB,CAAwB,CAAC,CACrCY,GAAG,CAAC,UAACgB,EAAO;gBAALF,YAAG;YAAO,UAAG;UAAH,CAAG,CAAC;UAElBG,aAAa,GAAGL,OAAO,CAACZ,GAAG,CAAC,aAAG;YAAI,iBAAU,CAACc,GAAG,CAAC;UAAf,CAAe,CAAC;UACnDI,cAAc,GAAGN,OAAO,CAACZ,GAAG,CAAC,aAAG;YAAI,aAAM,CAACc,GAAG,CAAC;UAAX,CAAW,CAAC;UAElDK,UAAU,GAAU,EAAE;UACtBC,WAAW,GAAa,EAAE;UAE9B,IAAIH,aAAa,CAACX,MAAM,GAAG,CAAC,EAAE;YAC5Bf,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE;YACT4B,UAAU,GAAGxC,iBAAiB,CAClCoC,aAAa,EACbC,cAAc,EACd,GAAG,CACJ;YACD5B,KAAK,CAACgC,UAAU,GAAG9B,IAAI,CAACC,GAAG,EAAE,GAAGF,EAAE;YAE5BgC,YAAUF,UAAU,CAACrB,GAAG,CAAC,aAAG;cAC9B,IAAMwB,WAAW,GAAGzB,QAAQ,CAACa,OAAO,CAACE,GAAG,CAAC,CAAC,CAACW,OAAO,CAACC,SAAS,EAAE;cAC9D,OAAO,IAAI3C,QAAQ,CACjByC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACjBA,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACjBA,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACjBA,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAClB;YACH,CAAC,CACF;YAEDJ,WAAW,GAAGC,UAAU,CAACrB,GAAG,CAAC,aAAG;cAAI,qBAAc,CAACc,GAAG,CAAC;YAAnB,CAAmB,CAAC;YACxDK,UAAU,GAAGE,UAAU,CAACrB,GAAG,CAAC,UAACc,GAAG,EAAEa,CAAC;cAAK,oBAAa,CAACb,GAAG,CAAC,CAACc,SAAS,CAACL,SAAO,CAACI,CAAC,CAAC,CAAC;YAAxC,CAAwC,CAAC;;UAGnF5B,QAAQ,CAAC8B,OAAO,CAAC,WAAC;YAChBC,CAAC,CAACL,OAAO,CAACtB,OAAO,EAAE;YACnB2B,CAAC,CAACtB,MAAM,CAACL,OAAO,EAAE;UACpB,CAAC,CAAC;UAEF,sBAAO;YACL4B,KAAK,EAAEZ,UAAU;YACjBX,MAAM,EAAEY;WACT;MAAA","names":["tf","nonMaxSuppression","extractImagePatches","MtcnnBox","RNet","stage2","img","inputBoxes","scoreThreshold","params","stats","ts","Date","now","width","height","rnetInputs","_c","stage2_extractImagePatches","rnetOuts","map","out","rnetInput","dispose","stage2_rnet","scoresTensor","length","concat","scores","_b","from","data","indices","score","idx","filter","_a","filteredBoxes","filteredScores","finalBoxes","finalScores","indicesNms","stage2_nms","regions_1","regionsData","regions","arraySync","i","calibrate","forEach","t","boxes"],"sourceRoot":"","sources":["../../../src/mtcnn/stage2.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}