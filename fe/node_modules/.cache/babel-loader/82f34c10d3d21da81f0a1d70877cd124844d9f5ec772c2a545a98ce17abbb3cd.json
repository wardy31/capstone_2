{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { extendWithFaceDetection } from '../factories/WithFaceDetection';\nimport { MtcnnOptions } from '../mtcnn/MtcnnOptions';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { TinyFaceDetectorOptions } from '../tinyFaceDetector/TinyFaceDetectorOptions';\nimport { TinyYolov2Options } from '../tinyYolov2';\nimport { ComposableTask } from './ComposableTask';\nimport { DetectAllFaceLandmarksTask, DetectSingleFaceLandmarksTask } from './DetectFaceLandmarksTasks';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderTask, PredictSingleAgeAndGenderTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsTask, PredictSingleFaceExpressionsTask } from './PredictFaceExpressionsTask';\nvar DetectFacesTaskBase = /** @class */function (_super) {\n  __extends(DetectFacesTaskBase, _super);\n  function DetectFacesTaskBase(input, options) {\n    if (options === void 0) {\n      options = new SsdMobilenetv1Options();\n    }\n    var _this = _super.call(this) || this;\n    _this.input = input;\n    _this.options = options;\n    return _this;\n  }\n  return DetectFacesTaskBase;\n}(ComposableTask);\nexport { DetectFacesTaskBase };\nvar DetectAllFacesTask = /** @class */function (_super) {\n  __extends(DetectAllFacesTask, _super);\n  function DetectAllFacesTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DetectAllFacesTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, input, options, faceDetectionFunction;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this, input = _a.input, options = _a.options;\n            if (!(options instanceof MtcnnOptions)) return [3 /*break*/, 2];\n            return [4 /*yield*/, nets.mtcnn.forward(input, options)];\n          case 1:\n            return [2 /*return*/, _b.sent().map(function (result) {\n              return result.detection;\n            })];\n          case 2:\n            faceDetectionFunction = options instanceof TinyFaceDetectorOptions ? function (input) {\n              return nets.tinyFaceDetector.locateFaces(input, options);\n            } : options instanceof SsdMobilenetv1Options ? function (input) {\n              return nets.ssdMobilenetv1.locateFaces(input, options);\n            } : options instanceof TinyYolov2Options ? function (input) {\n              return nets.tinyYolov2.locateFaces(input, options);\n            } : null;\n            if (!faceDetectionFunction) {\n              throw new Error('detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options');\n            }\n            return [2 /*return*/, faceDetectionFunction(input)];\n        }\n      });\n    });\n  };\n  DetectAllFacesTask.prototype.runAndExtendWithFaceDetections = function () {\n    var _this = this;\n    return new Promise(function (res) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var detections;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.run()];\n            case 1:\n              detections = _a.sent();\n              return [2 /*return*/, res(detections.map(function (detection) {\n                return extendWithFaceDetection({}, detection);\n              }))];\n          }\n        });\n      });\n    });\n  };\n  DetectAllFacesTask.prototype.withFaceLandmarks = function (useTinyLandmarkNet) {\n    if (useTinyLandmarkNet === void 0) {\n      useTinyLandmarkNet = false;\n    }\n    return new DetectAllFaceLandmarksTask(this.runAndExtendWithFaceDetections(), this.input, useTinyLandmarkNet);\n  };\n  DetectAllFacesTask.prototype.withFaceExpressions = function () {\n    return new PredictAllFaceExpressionsTask(this.runAndExtendWithFaceDetections(), this.input);\n  };\n  DetectAllFacesTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderTask(this.runAndExtendWithFaceDetections(), this.input);\n  };\n  return DetectAllFacesTask;\n}(DetectFacesTaskBase);\nexport { DetectAllFacesTask };\nvar DetectSingleFaceTask = /** @class */function (_super) {\n  __extends(DetectSingleFaceTask, _super);\n  function DetectSingleFaceTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DetectSingleFaceTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var faceDetections, faceDetectionWithHighestScore;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, new DetectAllFacesTask(this.input, this.options)];\n          case 1:\n            faceDetections = _a.sent();\n            faceDetectionWithHighestScore = faceDetections[0];\n            faceDetections.forEach(function (faceDetection) {\n              if (faceDetection.score > faceDetectionWithHighestScore.score) {\n                faceDetectionWithHighestScore = faceDetection;\n              }\n            });\n            return [2 /*return*/, faceDetectionWithHighestScore];\n        }\n      });\n    });\n  };\n  DetectSingleFaceTask.prototype.runAndExtendWithFaceDetection = function () {\n    var _this = this;\n    return new Promise(function (res) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var detection;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.run()];\n            case 1:\n              detection = _a.sent();\n              return [2 /*return*/, res(detection ? extendWithFaceDetection({}, detection) : undefined)];\n          }\n        });\n      });\n    });\n  };\n  DetectSingleFaceTask.prototype.withFaceLandmarks = function (useTinyLandmarkNet) {\n    if (useTinyLandmarkNet === void 0) {\n      useTinyLandmarkNet = false;\n    }\n    return new DetectSingleFaceLandmarksTask(this.runAndExtendWithFaceDetection(), this.input, useTinyLandmarkNet);\n  };\n  DetectSingleFaceTask.prototype.withFaceExpressions = function () {\n    return new PredictSingleFaceExpressionsTask(this.runAndExtendWithFaceDetection(), this.input);\n  };\n  DetectSingleFaceTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderTask(this.runAndExtendWithFaceDetection(), this.input);\n  };\n  return DetectSingleFaceTask;\n}(DetectFacesTaskBase);\nexport { DetectSingleFaceTask };","map":{"version":3,"mappings":";AAEA,SAASA,uBAAuB,QAA2B,gCAAgC;AAC3F,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,qBAAqB,QAAQ,yCAAyC;AAC/E,SAASC,uBAAuB,QAAQ,6CAA6C;AACrF,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,0BAA0B,EAAEC,6BAA6B,QAAQ,4BAA4B;AACtG,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,0BAA0B,EAAEC,6BAA6B,QAAQ,2BAA2B;AACrG,SAASC,6BAA6B,EAAEC,gCAAgC,QAAQ,8BAA8B;AAG9G;EAAkDC;EAChD,6BACYC,KAAgB,EAChBC,OAA2D;IAA3D;MAAAA,cAAoCb,qBAAqB,EAAE;IAAA;IAFvE,YAIEc,iBAAO;IAHGC,WAAK,GAALH,KAAK;IACLG,aAAO,GAAPF,OAAO;;EAGnB;EACF,0BAAC;AAAD,CAAC,CAPiDV,cAAc;;AAShE;EAAwCQ;EAAxC;;EA0DA;EAxDeK,gCAAG,GAAhB;;;;;;YAEQC,KAAqB,IAAI,EAAvBL,KAAK,aAAEC,OAAO;kBAElBA,OAAO,YAAYd,YAAY,GAA/B;YACM,qBAAMO,IAAI,CAACY,KAAK,CAACC,OAAO,CAACP,KAAK,EAAEC,OAAO,CAAC;;YAAhD,sBAAQO,SAAwC,CAC7CC,GAAG,CAAC,gBAAM;cAAI,aAAM,CAACC,SAAS;YAAhB,CAAgB,CAAC;;YAG9BC,qBAAqB,GAAGV,OAAO,YAAYZ,uBAAuB,GACpE,UAACW,KAAgB;cAAK,WAAI,CAACY,gBAAgB,CAACC,WAAW,CAACb,KAAK,EAAEC,OAAO,CAAC;YAAjD,CAAiD,GAEvEA,OAAO,YAAYb,qBAAqB,GACpC,UAACY,KAAgB;cAAK,WAAI,CAACc,cAAc,CAACD,WAAW,CAACb,KAAK,EAAEC,OAAO,CAAC;YAA/C,CAA+C,GAErEA,OAAO,YAAYX,iBAAiB,GAChC,UAACU,KAAgB;cAAK,WAAI,CAACe,UAAU,CAACF,WAAW,CAACb,KAAK,EAAEC,OAAO,CAAC;YAA3C,CAA2C,GACjE,IAET;YAEH,IAAI,CAACU,qBAAqB,EAAE;cAC1B,MAAM,IAAIK,KAAK,CAAC,qIAAqI,CAAC;;YAGxJ,sBAAOL,qBAAqB,CAACX,KAAK,CAAC;QAAA;;;GACpC;EAEOI,2DAA8B,GAAtC;IAAA;IACE,OAAO,IAAIa,OAAO,CAA0B,UAAMC,GAAG;MAAA;;;;;cAChC,qBAAM,IAAI,CAACC,GAAG,EAAE;;cAA7BC,UAAU,GAAGf,SAAgB;cACnC,sBAAOa,GAAG,CAACE,UAAU,CAACX,GAAG,CAAC,mBAAS;gBAAI,8BAAuB,CAAC,EAAE,EAAEC,SAAS,CAAC;cAAtC,CAAsC,CAAC,CAAC;UAAA;;;KAChF,CAAC;EACJ,CAAC;EAEDN,8CAAiB,GAAjB,UAAkBiB,kBAAmC;IAAnC;MAAAA,0BAAmC;IAAA;IACnD,OAAO,IAAI7B,0BAA0B,CACnC,IAAI,CAAC8B,8BAA8B,EAAE,EACrC,IAAI,CAACtB,KAAK,EACVqB,kBAAkB,CACnB;EACH,CAAC;EAEDjB,gDAAmB,GAAnB;IACE,OAAO,IAAIP,6BAA6B,CACtC,IAAI,CAACyB,8BAA8B,EAAE,EACrC,IAAI,CAACtB,KAAK,CACX;EACH,CAAC;EAEDI,6CAAgB,GAAhB;IACE,OAAO,IAAIT,0BAA0B,CACnC,IAAI,CAAC2B,8BAA8B,EAAE,EACrC,IAAI,CAACtB,KAAK,CACX;EACH,CAAC;EACH,yBAAC;AAAD,CAAC,CA1DuCuB,mBAAmB;;AA4D3D;EAA0CxB;EAA1C;;EAyCA;EAvCeyB,kCAAG,GAAhB;;;;;;YACyB,qBAAM,IAAIpB,kBAAkB,CAAC,IAAI,CAACJ,KAAK,EAAE,IAAI,CAACC,OAAO,CAAC;;YAAvEwB,cAAc,GAAGpB,SAAsD;YACzEqB,6BAA6B,GAAGD,cAAc,CAAC,CAAC,CAAC;YACrDA,cAAc,CAACE,OAAO,CAAC,uBAAa;cAClC,IAAIC,aAAa,CAACC,KAAK,GAAGH,6BAA6B,CAACG,KAAK,EAAE;gBAC7DH,6BAA6B,GAAGE,aAAa;;YAEjD,CAAC,CAAC;YACF,sBAAOF,6BAA6B;QAAC;;;GACtC;EAEOF,4DAA6B,GAArC;IAAA;IACE,OAAO,IAAIP,OAAO,CAAwB,UAAMC,GAAG;MAAA;;;;;cAC/B,qBAAM,IAAI,CAACC,GAAG,EAAE;;cAA5BT,SAAS,GAAGL,SAAgB;cAClC,sBAAOa,GAAG,CAACR,SAAS,GAAGxB,uBAAuB,CAAK,EAAE,EAAEwB,SAAS,CAAC,GAAGoB,SAAS,CAAC;UAAA;;;KAC/E,CAAC;EACJ,CAAC;EAEDN,gDAAiB,GAAjB,UAAkBH,kBAAmC;IAAnC;MAAAA,0BAAmC;IAAA;IACnD,OAAO,IAAI5B,6BAA6B,CACtC,IAAI,CAACsC,6BAA6B,EAAE,EACpC,IAAI,CAAC/B,KAAK,EACVqB,kBAAkB,CACnB;EACH,CAAC;EAEDG,kDAAmB,GAAnB;IACE,OAAO,IAAI1B,gCAAgC,CACzC,IAAI,CAACiC,6BAA6B,EAAE,EACpC,IAAI,CAAC/B,KAAK,CACX;EACH,CAAC;EAEDwB,+CAAgB,GAAhB;IACE,OAAO,IAAI5B,6BAA6B,CACtC,IAAI,CAACmC,6BAA6B,EAAE,EACpC,IAAI,CAAC/B,KAAK,CACX;EACH,CAAC;EACH,2BAAC;AAAD,CAAC,CAzCyCuB,mBAAmB","names":["extendWithFaceDetection","MtcnnOptions","SsdMobilenetv1Options","TinyFaceDetectorOptions","TinyYolov2Options","ComposableTask","DetectAllFaceLandmarksTask","DetectSingleFaceLandmarksTask","nets","PredictAllAgeAndGenderTask","PredictSingleAgeAndGenderTask","PredictAllFaceExpressionsTask","PredictSingleFaceExpressionsTask","__extends","input","options","_super","_this","DetectAllFacesTask","_a","mtcnn","forward","_b","map","detection","faceDetectionFunction","tinyFaceDetector","locateFaces","ssdMobilenetv1","tinyYolov2","Error","Promise","res","run","detections","useTinyLandmarkNet","runAndExtendWithFaceDetections","DetectFacesTaskBase","DetectSingleFaceTask","faceDetections","faceDetectionWithHighestScore","forEach","faceDetection","score","undefined","runAndExtendWithFaceDetection"],"sourceRoot":"","sources":["../../../src/globalApi/DetectFacesTasks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}