{"ast":null,"code":"import axios from \"@/config/axios\";\n// import moment from \"moment\";\n\nexport default {\n  namespaced: true,\n  state: () => ({\n    data: [],\n    loading: [],\n    dot: false\n  }),\n  mutations: {\n    setData(state, data) {\n      state.data = data;\n    },\n    setLoading(state, data) {\n      state.loading = data;\n    },\n    setDot(state, data) {\n      state.dot = data;\n    }\n  },\n  actions: {\n    async getNotifications({\n      commi\n    }) {\n      commit(\"setLoading\", true);\n      commit(\"setDot\", true);\n      try {\n        const {\n          data\n        } = await axios.get(`clinic-notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        await commit(\"setData\", data);\n        await commit(\"setDot\", true);\n        await commit(\"setLoading\", false);\n        console.log(\"data\", data);\n        return true;\n      } catch (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n        return false;\n      }\n    },\n    async getUserNotifications({\n      commit,\n      state\n    }) {\n      commit(\"setLoading\", true);\n      try {\n        const {\n          data\n        } = await axios.get(`user-notifications`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        if (data.length > state.data.length) {\n          if (data.length) {\n            await commit(\"setData\", data);\n            commit(\"setDot\", true);\n          }\n        }\n        await commit(\"setLoading\", false);\n        return true;\n      } catch (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","namespaced","state","data","loading","dot","mutations","setData","setLoading","setDot","actions","getNotifications","commi","commit","get","headers","Authorization","localStorage","getItem","console","log","error","getUserNotifications","length"],"sources":["/home/wardy/Desktop/capstone/fe/src/store/modules/notifications.js"],"sourcesContent":["import axios from \"@/config/axios\";\n// import moment from \"moment\";\n\nexport default {\n  namespaced: true,\n  state: () => ({\n    data: [],\n    loading: [],\n    dot: false,\n  }),\n  mutations: {\n    setData(state, data) {\n      state.data = data;\n    },\n    setLoading(state, data) {\n      state.loading = data;\n    },\n    setDot(state, data) {\n      state.dot = data;\n    },\n  },\n  actions: {\n    async getNotifications({ commi }) {\n      commit(\"setLoading\", true);\n      commit(\"setDot\", true);\n      try {\n        const { data } = await axios.get(`clinic-notifications`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n        });\n\n        await commit(\"setData\", data);\n        await commit(\"setDot\", true);\n        await commit(\"setLoading\", false);\n\n        console.log(\"data\", data);\n        return true;\n      } catch (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n\n        return false;\n      }\n    },\n\n    async getUserNotifications({ commit, state }) {\n      commit(\"setLoading\", true);\n      try {\n        const { data } = await axios.get(`user-notifications`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n        });\n\n        if (data.length > state.data.length) {\n          if (data.length) {\n            await commit(\"setData\", data);\n            commit(\"setDot\", true);\n          }\n        }\n        await commit(\"setLoading\", false);\n\n        return true;\n      } catch (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n\n        return false;\n      }\n    },\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,gBAAgB;AAClC;;AAEA,eAAe;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,OAAO;IACZC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,GAAG,EAAE;EACP,CAAC,CAAC;EACFC,SAAS,EAAE;IACTC,OAAO,CAACL,KAAK,EAAEC,IAAI,EAAE;MACnBD,KAAK,CAACC,IAAI,GAAGA,IAAI;IACnB,CAAC;IACDK,UAAU,CAACN,KAAK,EAAEC,IAAI,EAAE;MACtBD,KAAK,CAACE,OAAO,GAAGD,IAAI;IACtB,CAAC;IACDM,MAAM,CAACP,KAAK,EAAEC,IAAI,EAAE;MAClBD,KAAK,CAACG,GAAG,GAAGF,IAAI;IAClB;EACF,CAAC;EACDO,OAAO,EAAE;IACP,MAAMC,gBAAgB,CAAC;MAAEC;IAAM,CAAC,EAAE;MAChCC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC;MAC1BA,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;MACtB,IAAI;QACF,MAAM;UAAEV;QAAK,CAAC,GAAG,MAAMH,KAAK,CAACc,GAAG,CAAE,sBAAqB,EAAE;UACvDC,OAAO,EAAE;YAAEC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;UAAE;QACtE,CAAC,CAAC;QAEF,MAAML,MAAM,CAAC,SAAS,EAAEV,IAAI,CAAC;QAC7B,MAAMU,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC5B,MAAMA,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC;QAEjCM,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEjB,IAAI,CAAC;QACzB,OAAO,IAAI;MACb,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdR,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC;QAC3BM,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QAElB,OAAO,KAAK;MACd;IACF,CAAC;IAED,MAAMC,oBAAoB,CAAC;MAAET,MAAM;MAAEX;IAAM,CAAC,EAAE;MAC5CW,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC;MAC1B,IAAI;QACF,MAAM;UAAEV;QAAK,CAAC,GAAG,MAAMH,KAAK,CAACc,GAAG,CAAE,oBAAmB,EAAE;UACrDC,OAAO,EAAE;YAAEC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;UAAE;QACtE,CAAC,CAAC;QAEF,IAAIf,IAAI,CAACoB,MAAM,GAAGrB,KAAK,CAACC,IAAI,CAACoB,MAAM,EAAE;UACnC,IAAIpB,IAAI,CAACoB,MAAM,EAAE;YACf,MAAMV,MAAM,CAAC,SAAS,EAAEV,IAAI,CAAC;YAC7BU,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;UACxB;QACF;QACA,MAAMA,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC;QAEjC,OAAO,IAAI;MACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdR,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC;QAC3BM,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QAElB,OAAO,KAAK;MACd;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}