{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nvar FaceFeatureExtractor = /** @class */function (_super) {\n  __extends(FaceFeatureExtractor, _super);\n  function FaceFeatureExtractor() {\n    return _super.call(this, 'FaceFeatureExtractor') || this;\n  }\n  FaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return out;\n    });\n  };\n  FaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_model';\n  };\n  FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  FaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return FaceFeatureExtractor;\n}(NeuralNetwork);\nexport { FaceFeatureExtractor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAE3C,SAA8BC,UAAU,QAAQ,QAAQ;AACxD,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,0BAA0B,QAAQ,8BAA8B;AAGzE;EAA0CC;EAExC;WACEC,kBAAM,sBAAsB,CAAC;EAC/B;EAEOC,2CAAY,GAAnB,UAAoBC,KAAe;IAEzB,wBAAM;IAEd,IAAI,CAACC,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;;IAGvE,OAAOZ,EAAE,CAACa,IAAI,CAAC;MACb,IAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC;MAClD,IAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MAC3C,IAAMC,UAAU,GAAGd,SAAS,CAACW,WAAW,EAAEE,OAAO,CAAC,CAACE,GAAG,CAAClB,EAAE,CAACmB,MAAM,CAAC,GAAG,CAAC,CAAgB;MAErF,IAAIC,GAAG,GAAGhB,WAAW,CAACa,UAAU,EAAEN,MAAM,CAACU,MAAM,EAAE,IAAI,CAAC;MACtDD,GAAG,GAAGhB,WAAW,CAACgB,GAAG,EAAET,MAAM,CAACW,MAAM,CAAC;MACrCF,GAAG,GAAGhB,WAAW,CAACgB,GAAG,EAAET,MAAM,CAACY,MAAM,CAAC;MACrCH,GAAG,GAAGhB,WAAW,CAACgB,GAAG,EAAET,MAAM,CAACa,MAAM,CAAC;MACrCJ,GAAG,GAAGpB,EAAE,CAACyB,OAAO,CAACL,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;MAE9C,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ,CAAC;EAEYX,sCAAO,GAApB,UAAqBC,KAAgB;;;;;;YAC5BgB,SAAI,CAACC,YAAY;YAAC,qBAAM1B,UAAU,CAACS,KAAK,CAAC;;YAAhD,sBAAOgB,aAAI,GAAcE,SAAuB,EAAC;QAAA;;;GAClD;EAESnB,kDAAmB,GAA7B;IACE,OAAO,8BAA8B;EACvC,CAAC;EAESA,yDAA0B,GAApC,UAAqCoB,SAA4B;IAC/D,OAAOvB,0BAA0B,CAACuB,SAAS,CAAC;EAC9C,CAAC;EAESpB,4CAAa,GAAvB,UAAwBqB,OAAqB;IAC3C,OAAOzB,aAAa,CAACyB,OAAO,CAAC;EAC/B,CAAC;EACH,2BAAC;AAAD,CAAC,CA5CyC5B,aAAa","names":["tf","toNetInput","NeuralNetwork","normalize","denseBlock4","extractParams","extractParamsFromWeigthMap","__extends","_super","FaceFeatureExtractor","input","params","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","out","dense0","dense1","dense2","dense3","avgPool","_a","forwardInput","_b","weightMap","weights"],"sourceRoot":"","sources":["../../../src/faceFeatureExtractor/FaceFeatureExtractor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}