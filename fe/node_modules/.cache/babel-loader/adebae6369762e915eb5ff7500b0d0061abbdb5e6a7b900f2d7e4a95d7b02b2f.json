{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { extendWithFaceDescriptor } from '../factories/WithFaceDescriptor';\nimport { ComposableTask } from './ComposableTask';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\nvar ComputeFaceDescriptorsTaskBase = /** @class */function (_super) {\n  __extends(ComputeFaceDescriptorsTaskBase, _super);\n  function ComputeFaceDescriptorsTaskBase(parentTask, input) {\n    var _this = _super.call(this) || this;\n    _this.parentTask = parentTask;\n    _this.input = input;\n    return _this;\n  }\n  return ComputeFaceDescriptorsTaskBase;\n}(ComposableTask);\nexport { ComputeFaceDescriptorsTaskBase };\nvar ComputeAllFaceDescriptorsTask = /** @class */function (_super) {\n  __extends(ComputeAllFaceDescriptorsTask, _super);\n  function ComputeAllFaceDescriptorsTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ComputeAllFaceDescriptorsTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResults, descriptors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResults = _a.sent();\n            return [4 /*yield*/, extractAllFacesAndComputeResults(parentResults, this.input, function (faces) {\n              return Promise.all(faces.map(function (face) {\n                return nets.faceRecognitionNet.computeFaceDescriptor(face);\n              }));\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, {\n                useDlibAlignment: true\n              });\n            })];\n          case 2:\n            descriptors = _a.sent();\n            return [2 /*return*/, descriptors.map(function (descriptor, i) {\n              return extendWithFaceDescriptor(parentResults[i], descriptor);\n            })];\n        }\n      });\n    });\n  };\n  ComputeAllFaceDescriptorsTask.prototype.withFaceExpressions = function () {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  ComputeAllFaceDescriptorsTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  return ComputeAllFaceDescriptorsTask;\n}(ComputeFaceDescriptorsTaskBase);\nexport { ComputeAllFaceDescriptorsTask };\nvar ComputeSingleFaceDescriptorTask = /** @class */function (_super) {\n  __extends(ComputeSingleFaceDescriptorTask, _super);\n  function ComputeSingleFaceDescriptorTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ComputeSingleFaceDescriptorTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResult, descriptor;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResult = _a.sent();\n            if (!parentResult) {\n              return [2 /*return*/];\n            }\n\n            return [4 /*yield*/, extractSingleFaceAndComputeResult(parentResult, this.input, function (face) {\n              return nets.faceRecognitionNet.computeFaceDescriptor(face);\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, {\n                useDlibAlignment: true\n              });\n            })];\n          case 2:\n            descriptor = _a.sent();\n            return [2 /*return*/, extendWithFaceDescriptor(parentResult, descriptor)];\n        }\n      });\n    });\n  };\n  ComputeSingleFaceDescriptorTask.prototype.withFaceExpressions = function () {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  ComputeSingleFaceDescriptorTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  return ComputeSingleFaceDescriptorTask;\n}(ComputeFaceDescriptorsTaskBase);\nexport { ComputeSingleFaceDescriptorTask };","map":{"version":3,"mappings":";AACA,SAASA,wBAAwB,QAA4B,iCAAiC;AAG9F,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,gCAAgC,EAAEC,iCAAiC,QAAQ,iCAAiC;AACrH,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SACEC,2CAA2C,EAC3CC,8CAA8C,QACzC,2BAA2B;AAClC,SACEC,8CAA8C,EAC9CC,iDAAiD,QAC5C,8BAA8B;AAErC;EAA4EC;EAC1E,wCACYC,UAAkE,EAClEC,KAAgB;IAF5B,YAIEC,iBAAO;IAHGC,gBAAU,GAAVH,UAAU;IACVG,WAAK,GAALF,KAAK;;EAGjB;EACF,qCAAC;AAAD,CAAC,CAP2EV,cAAc;;AAS1F;EAEUQ;EAFV;;EA4BA;EAxBeK,2CAAG,GAAhB;;;;;;YAEwB,qBAAM,IAAI,CAACJ,UAAU;;YAArCK,aAAa,GAAGC,SAAqB;YAEvB,qBAAMd,gCAAgC,CACxDa,aAAa,EACb,IAAI,CAACJ,KAAK,EACV,eAAK;cAAI,cAAO,CAACM,GAAG,CAACC,KAAK,CAACC,GAAG,CAAC,cAAI;gBACjC,WAAI,CAACC,kBAAkB,CAACC,qBAAqB,CAACC,IAAI,CAA0B;cAA5E,CAA4E,CAC7E,CAAC;YAFO,CAEP,EACF,IAAI,EACJ,sBAAY;cAAI,mBAAY,CAACC,SAAS,CAACC,KAAK,CAAC,IAAI,EAAE;gBAAEC,gBAAgB,EAAE;cAAI,CAAE,CAAC;YAA9D,CAA8D,CAC/E;;YARKC,WAAW,GAAGV,SAQnB;YAED,sBAAOU,WAAW,CAACP,GAAG,CAAC,UAACQ,UAAU,EAAEC,CAAC;cAAK,+BAAwB,CAAUb,aAAa,CAACa,CAAC,CAAC,EAAED,UAAU,CAAC;YAA/D,CAA+D,CAAC;QAAA;;;GAC3G;EAEDb,2DAAmB,GAAnB;IACE,OAAO,IAAIP,8CAA8C,CAAC,IAAI,EAAE,IAAI,CAACI,KAAK,CAAC;EAC7E,CAAC;EAEDG,wDAAgB,GAAhB;IACE,OAAO,IAAIT,2CAA2C,CAAC,IAAI,EAAE,IAAI,CAACM,KAAK,CAAC;EAC1E,CAAC;EACH,oCAAC;AAAD,CAAC,CA1BSkB,8BAA8B;;AA4BxC;EAEUpB;EAFV;;EA4BA;EAxBeqB,6CAAG,GAAhB;;;;;;YAEuB,qBAAM,IAAI,CAACpB,UAAU;;YAApCqB,YAAY,GAAGf,SAAqB;YAC1C,IAAI,CAACe,YAAY,EAAE;cACjB;;;YAEiB,qBAAM5B,iCAAiC,CACxD4B,YAAY,EACZ,IAAI,CAACpB,KAAK,EACV,cAAI;cAAI,WAAI,CAACS,kBAAkB,CAACC,qBAAqB,CAACC,IAAI,CAA0B;YAA5E,CAA4E,EACpF,IAAI,EACJ,sBAAY;cAAI,mBAAY,CAACC,SAAS,CAACC,KAAK,CAAC,IAAI,EAAE;gBAAEC,gBAAgB,EAAE;cAAI,CAAE,CAAC;YAA9D,CAA8D,CAC/E;;YANKE,UAAU,GAAGX,SAMlB;YAED,sBAAOhB,wBAAwB,CAAC+B,YAAY,EAAEJ,UAAU,CAAC;QAAA;;;GAC1D;EAEDG,6DAAmB,GAAnB;IACE,OAAO,IAAItB,iDAAiD,CAAC,IAAI,EAAE,IAAI,CAACG,KAAK,CAAC;EAChF,CAAC;EAEDmB,0DAAgB,GAAhB;IACE,OAAO,IAAIxB,8CAA8C,CAAC,IAAI,EAAE,IAAI,CAACK,KAAK,CAAC;EAC7E,CAAC;EACH,sCAAC;AAAD,CAAC,CA1BSkB,8BAA8B","names":["extendWithFaceDescriptor","ComposableTask","extractAllFacesAndComputeResults","extractSingleFaceAndComputeResult","nets","PredictAllAgeAndGenderWithFaceAlignmentTask","PredictSingleAgeAndGenderWithFaceAlignmentTask","PredictAllFaceExpressionsWithFaceAlignmentTask","PredictSingleFaceExpressionsWithFaceAlignmentTask","__extends","parentTask","input","_super","_this","ComputeAllFaceDescriptorsTask","parentResults","_a","all","faces","map","faceRecognitionNet","computeFaceDescriptor","face","landmarks","align","useDlibAlignment","descriptors","descriptor","i","ComputeFaceDescriptorsTaskBase","ComputeSingleFaceDescriptorTask","parentResult"],"sourceRoot":"","sources":["../../../src/globalApi/ComputeFaceDescriptorsTasks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}