{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Point } from '../classes';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { toNetInput } from '../dom';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { isEven } from '../utils';\nvar FaceLandmark68NetBase = /** @class */function (_super) {\n  __extends(FaceLandmark68NetBase, _super);\n  function FaceLandmark68NetBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  FaceLandmark68NetBase.prototype.postProcess = function (output, inputSize, originalDimensions) {\n    var inputDimensions = originalDimensions.map(function (_a) {\n      var width = _a.width,\n        height = _a.height;\n      var scale = inputSize / Math.max(height, width);\n      return {\n        width: width * scale,\n        height: height * scale\n      };\n    });\n    var batchSize = inputDimensions.length;\n    return tf.tidy(function () {\n      var createInterleavedTensor = function (fillX, fillY) {\n        return tf.stack([tf.fill([68], fillX), tf.fill([68], fillY)], 1).as2D(1, 136).as1D();\n      };\n      var getPadding = function (batchIdx, cond) {\n        var _a = inputDimensions[batchIdx],\n          width = _a.width,\n          height = _a.height;\n        return cond(width, height) ? Math.abs(width - height) / 2 : 0;\n      };\n      var getPaddingX = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return w < h;\n        });\n      };\n      var getPaddingY = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return h < w;\n        });\n      };\n      var landmarkTensors = output.mul(tf.fill([batchSize, 136], inputSize)).sub(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(getPaddingX(batchIdx), getPaddingY(batchIdx));\n      }))).div(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(inputDimensions[batchIdx].width, inputDimensions[batchIdx].height);\n      })));\n      return landmarkTensors;\n    });\n  };\n  FaceLandmark68NetBase.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      var out = _this.runNet(input);\n      return _this.postProcess(out, input.inputSize, input.inputDimensions.map(function (_a) {\n        var height = _a[0],\n          width = _a[1];\n        return {\n          height: height,\n          width: width\n        };\n      }));\n    });\n  };\n  FaceLandmark68NetBase.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceLandmark68NetBase.prototype.detectLandmarks = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, landmarkTensors, landmarksForBatch;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            landmarkTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4 /*yield*/, Promise.all(landmarkTensors.map(function (landmarkTensor, batchIdx) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var landmarksArray, _a, _b, xCoords, yCoords;\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = Array).from;\n                      return [4 /*yield*/, landmarkTensor.data()];\n                    case 1:\n                      landmarksArray = _b.apply(_a, [_c.sent()]);\n                      xCoords = landmarksArray.filter(function (_, i) {\n                        return isEven(i);\n                      });\n                      yCoords = landmarksArray.filter(function (_, i) {\n                        return !isEven(i);\n                      });\n                      return [2 /*return*/, new FaceLandmarks68(Array(68).fill(0).map(function (_, i) {\n                        return new Point(xCoords[i], yCoords[i]);\n                      }), {\n                        height: netInput.getInputHeight(batchIdx),\n                        width: netInput.getInputWidth(batchIdx)\n                      })];\n                  }\n                });\n              });\n            }))];\n          case 2:\n            landmarksForBatch = _a.sent();\n            landmarkTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2 /*return*/, netInput.isBatchInput ? landmarksForBatch : landmarksForBatch[0]];\n        }\n      });\n    });\n  };\n  FaceLandmark68NetBase.prototype.getClassifierChannelsOut = function () {\n    return 136;\n  };\n  return FaceLandmark68NetBase;\n}(FaceProcessor);\nexport { FaceLandmark68NetBase };","map":{"version":3,"mappings":"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","names":["tf","Point","FaceLandmarks68","toNetInput","FaceProcessor","isEven","__extends","FaceLandmark68NetBase","output","inputSize","originalDimensions","inputDimensions","map","_a","width","height","scale","Math","max","batchSize","length","tidy","createInterleavedTensor","fillX","fillY","stack","fill","as2D","as1D","getPadding","batchIdx","cond","abs","getPaddingX","w","h","getPaddingY","landmarkTensors","mul","sub","Array","from","_","div","input","out","_this","runNet","postProcess","forwardInput","_b","netInput","unstack","Promise","all","landmarkTensor","data","landmarksArray","_c","xCoords","filter","i","yCoords","getInputHeight","getInputWidth","landmarksForBatch","forEach","dispose","isBatchInput"],"sourceRoot":"","sources":["../../../src/faceLandmarkNet/FaceLandmark68NetBase.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}