{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock3 } from './denseBlock';\nimport { extractParamsFromWeigthMapTiny } from './extractParamsFromWeigthMapTiny';\nimport { extractParamsTiny } from './extractParamsTiny';\nvar TinyFaceFeatureExtractor = /** @class */function (_super) {\n  __extends(TinyFaceFeatureExtractor, _super);\n  function TinyFaceFeatureExtractor() {\n    return _super.call(this, 'TinyFaceFeatureExtractor') || this;\n  }\n  TinyFaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyFaceFeatureExtractor - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock3(normalized, params.dense0, true);\n      out = denseBlock3(out, params.dense1);\n      out = denseBlock3(out, params.dense2);\n      out = tf.avgPool(out, [14, 14], [2, 2], 'valid');\n      return out;\n    });\n  };\n  TinyFaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  TinyFaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_tiny_model';\n  };\n  TinyFaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMapTiny(weightMap);\n  };\n  TinyFaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParamsTiny(weights);\n  };\n  return TinyFaceFeatureExtractor;\n}(NeuralNetwork);\nexport { TinyFaceFeatureExtractor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAE3C,SAA8BC,UAAU,QAAQ,QAAQ;AACxD,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,SAASC,iBAAiB,QAAQ,qBAAqB;AAGvD;EAA8CC;EAE5C;WACEC,kBAAM,0BAA0B,CAAC;EACnC;EAEOC,+CAAY,GAAnB,UAAoBC,KAAe;IAEzB,wBAAM;IAEd,IAAI,CAACC,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;;IAG3E,OAAOZ,EAAE,CAACa,IAAI,CAAC;MACb,IAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC;MAClD,IAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MAC3C,IAAMC,UAAU,GAAGd,SAAS,CAACW,WAAW,EAAEE,OAAO,CAAC,CAACE,GAAG,CAAClB,EAAE,CAACmB,MAAM,CAAC,GAAG,CAAC,CAAgB;MAErF,IAAIC,GAAG,GAAGhB,WAAW,CAACa,UAAU,EAAEN,MAAM,CAACU,MAAM,EAAE,IAAI,CAAC;MACtDD,GAAG,GAAGhB,WAAW,CAACgB,GAAG,EAAET,MAAM,CAACW,MAAM,CAAC;MACrCF,GAAG,GAAGhB,WAAW,CAACgB,GAAG,EAAET,MAAM,CAACY,MAAM,CAAC;MACrCH,GAAG,GAAGpB,EAAE,CAACwB,OAAO,CAACJ,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;MAEhD,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ,CAAC;EAEYX,0CAAO,GAApB,UAAqBC,KAAgB;;;;;;YAC5Be,SAAI,CAACC,YAAY;YAAC,qBAAMzB,UAAU,CAACS,KAAK,CAAC;;YAAhD,sBAAOe,aAAI,GAAcE,SAAuB,EAAC;QAAA;;;GAClD;EAESlB,sDAAmB,GAA7B;IACE,OAAO,mCAAmC;EAC5C,CAAC;EAESA,6DAA0B,GAApC,UAAqCmB,SAA4B;IAC/D,OAAOvB,8BAA8B,CAACuB,SAAS,CAAC;EAClD,CAAC;EAESnB,gDAAa,GAAvB,UAAwBoB,OAAqB;IAC3C,OAAOvB,iBAAiB,CAACuB,OAAO,CAAC;EACnC,CAAC;EACH,+BAAC;AAAD,CAAC,CA3C6C3B,aAAa","names":["tf","toNetInput","NeuralNetwork","normalize","denseBlock3","extractParamsFromWeigthMapTiny","extractParamsTiny","__extends","_super","TinyFaceFeatureExtractor","input","params","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","out","dense0","dense1","dense2","avgPool","_a","forwardInput","_b","weightMap","weights"],"sourceRoot":"","sources":["../../../src/faceFeatureExtractor/TinyFaceFeatureExtractor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}