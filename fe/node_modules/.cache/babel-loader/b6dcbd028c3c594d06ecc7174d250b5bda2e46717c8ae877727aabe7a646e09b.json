{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { seperateWeightMaps } from '../faceProcessor/util';\nimport { TinyXception } from '../xception/TinyXception';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { Gender } from './types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { NetInput, toNetInput } from '../dom';\nvar AgeGenderNet = /** @class */function (_super) {\n  __extends(AgeGenderNet, _super);\n  function AgeGenderNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new TinyXception(2);\n    }\n    var _this = _super.call(this, 'AgeGenderNet') || this;\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n  Object.defineProperty(AgeGenderNet.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AgeGenderNet.prototype.runNet = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      var pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\n      var age = fullyConnectedLayer(pooled, params.fc.age).as1D();\n      var gender = fullyConnectedLayer(pooled, params.fc.gender);\n      return {\n        age: age,\n        gender: gender\n      };\n    });\n  };\n  AgeGenderNet.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      var _a = _this.runNet(input),\n        age = _a.age,\n        gender = _a.gender;\n      return {\n        age: age,\n        gender: tf.softmax(gender)\n      };\n    });\n  };\n  AgeGenderNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  AgeGenderNet.prototype.predictAgeAndGender = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            return [4 /*yield*/, this.forwardInput(netInput)];\n          case 2:\n            out = _a.sent();\n            ages = tf.unstack(out.age);\n            genders = tf.unstack(out.gender);\n            ageAndGenderTensors = ages.map(function (ageTensor, i) {\n              return {\n                ageTensor: ageTensor,\n                genderTensor: genders[i]\n              };\n            });\n            return [4 /*yield*/, Promise.all(ageAndGenderTensors.map(function (_a) {\n              var ageTensor = _a.ageTensor,\n                genderTensor = _a.genderTensor;\n              return __awaiter(_this, void 0, void 0, function () {\n                var age, probMale, isMale, gender, genderProbability;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, ageTensor.data()];\n                    case 1:\n                      age = _b.sent()[0];\n                      return [4 /*yield*/, genderTensor.data()];\n                    case 2:\n                      probMale = _b.sent()[0];\n                      isMale = probMale > 0.5;\n                      gender = isMale ? Gender.MALE : Gender.FEMALE;\n                      genderProbability = isMale ? probMale : 1 - probMale;\n                      ageTensor.dispose();\n                      genderTensor.dispose();\n                      return [2 /*return*/, {\n                        age: age,\n                        gender: gender,\n                        genderProbability: genderProbability\n                      }];\n                  }\n                });\n              });\n            }))];\n          case 3:\n            predictionsByBatch = _a.sent();\n            out.age.dispose();\n            out.gender.dispose();\n            return [2 /*return*/, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n  AgeGenderNet.prototype.getDefaultModelName = function () {\n    return 'age_gender_model';\n  };\n  AgeGenderNet.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n  AgeGenderNet.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n      params = _a.params,\n      paramMappings = _a.paramMappings;\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n  AgeGenderNet.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights);\n  };\n  AgeGenderNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n      featureExtractorMap = _a.featureExtractorMap,\n      classifierMap = _a.classifierMap;\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n  AgeGenderNet.prototype.extractParams = function (weights) {\n    var classifierWeightSize = 512 * 1 + 1 + (512 * 2 + 2);\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n  return AgeGenderNet;\n}(NeuralNetwork);\nexport { AgeGenderNet };","map":{"version":3,"mappings":"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","names":["tf","fullyConnectedLayer","seperateWeightMaps","TinyXception","extractParams","extractParamsFromWeigthMap","Gender","NeuralNetwork","NetInput","toNetInput","__extends","faceFeatureExtractor","_super","_this","_faceFeatureExtractor","Object","AgeGenderNet","input","params","Error","_name","tidy","bottleneckFeatures","forwardInput","pooled","avgPool","as2D","shape","age","fc","as1D","gender","softmax","_a","_b","netInput","out","ages","unstack","genders","ageAndGenderTensors","map","ageTensor","i","genderTensor","Promise","all","data","probMale","isMale","MALE","FEMALE","genderProbability","dispose","predictionsByBatch","isBatchInput","throwOnRedispose","weights","paramMappings","_params","_paramMappings","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights","extractClassifierParams"],"sourceRoot":"","sources":["../../../src/ageGenderNet/AgeGenderNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}