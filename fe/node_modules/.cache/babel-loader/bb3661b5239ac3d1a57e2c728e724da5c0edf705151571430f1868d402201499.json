{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Point, Rect } from '../classes';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { FaceLandmarks5 } from '../classes/FaceLandmarks5';\nimport { toNetInput } from '../dom';\nimport { extendWithFaceDetection, extendWithFaceLandmarks } from '../factories';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { bgrToRgbTensor } from './bgrToRgbTensor';\nimport { CELL_SIZE } from './config';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { getSizesForScale } from './getSizesForScale';\nimport { MtcnnOptions } from './MtcnnOptions';\nimport { pyramidDown } from './pyramidDown';\nimport { stage1 } from './stage1';\nimport { stage2 } from './stage2';\nimport { stage3 } from './stage3';\nvar Mtcnn = /** @class */function (_super) {\n  __extends(Mtcnn, _super);\n  function Mtcnn() {\n    return _super.call(this, 'Mtcnn') || this;\n  }\n  Mtcnn.prototype.load = function (weightsOrUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        console.warn('mtcnn is deprecated and will be removed soon');\n        return [2 /*return*/, _super.prototype.load.call(this, weightsOrUrl)];\n      });\n    });\n  };\n  Mtcnn.prototype.loadFromDisk = function (filePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        console.warn('mtcnn is deprecated and will be removed soon');\n        return [2 /*return*/, _super.prototype.loadFromDisk.call(this, filePath)];\n      });\n    });\n  };\n  Mtcnn.prototype.forwardInput = function (input, forwardParams) {\n    if (forwardParams === void 0) {\n      forwardParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var params, inputCanvas, stats, tsTotal, imgTensor, onReturn, _a, height, width, _b, minFaceSize, scaleFactor, maxNumScales, scoreThresholds, scaleSteps, scales, ts, out1, out2, out3, results;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            params = this.params;\n            if (!params) {\n              throw new Error('Mtcnn - load model before inference');\n            }\n            inputCanvas = input.canvases[0];\n            if (!inputCanvas) {\n              throw new Error('Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet.');\n            }\n            stats = {};\n            tsTotal = Date.now();\n            imgTensor = tf.tidy(function () {\n              return bgrToRgbTensor(tf.expandDims(tf.browser.fromPixels(inputCanvas)).toFloat());\n            });\n            onReturn = function (results) {\n              // dispose tensors on return\n              imgTensor.dispose();\n              stats.total = Date.now() - tsTotal;\n              return results;\n            };\n            _a = imgTensor.shape.slice(1), height = _a[0], width = _a[1];\n            _b = new MtcnnOptions(forwardParams), minFaceSize = _b.minFaceSize, scaleFactor = _b.scaleFactor, maxNumScales = _b.maxNumScales, scoreThresholds = _b.scoreThresholds, scaleSteps = _b.scaleSteps;\n            scales = (scaleSteps || pyramidDown(minFaceSize, scaleFactor, [height, width])).filter(function (scale) {\n              var sizes = getSizesForScale(scale, [height, width]);\n              return Math.min(sizes.width, sizes.height) > CELL_SIZE;\n            }).slice(0, maxNumScales);\n            stats.scales = scales;\n            stats.pyramid = scales.map(function (scale) {\n              return getSizesForScale(scale, [height, width]);\n            });\n            ts = Date.now();\n            return [4 /*yield*/, stage1(imgTensor, scales, scoreThresholds[0], params.pnet, stats)];\n          case 1:\n            out1 = _c.sent();\n            stats.total_stage1 = Date.now() - ts;\n            if (!out1.boxes.length) {\n              return [2 /*return*/, onReturn({\n                results: [],\n                stats: stats\n              })];\n            }\n            stats.stage2_numInputBoxes = out1.boxes.length;\n            // using the inputCanvas to extract and resize the image patches, since it is faster\n            // than doing this on the gpu\n            ts = Date.now();\n            return [4 /*yield*/, stage2(inputCanvas, out1.boxes, scoreThresholds[1], params.rnet, stats)];\n          case 2:\n            out2 = _c.sent();\n            stats.total_stage2 = Date.now() - ts;\n            if (!out2.boxes.length) {\n              return [2 /*return*/, onReturn({\n                results: [],\n                stats: stats\n              })];\n            }\n            stats.stage3_numInputBoxes = out2.boxes.length;\n            ts = Date.now();\n            return [4 /*yield*/, stage3(inputCanvas, out2.boxes, scoreThresholds[2], params.onet, stats)];\n          case 3:\n            out3 = _c.sent();\n            stats.total_stage3 = Date.now() - ts;\n            results = out3.boxes.map(function (box, idx) {\n              return extendWithFaceLandmarks(extendWithFaceDetection({}, new FaceDetection(out3.scores[idx], new Rect(box.left / width, box.top / height, box.width / width, box.height / height), {\n                height: height,\n                width: width\n              })), new FaceLandmarks5(out3.points[idx].map(function (pt) {\n                return pt.sub(new Point(box.left, box.top)).div(new Point(box.width, box.height));\n              }), {\n                width: box.width,\n                height: box.height\n              }));\n            });\n            return [2 /*return*/, onReturn({\n              results: results,\n              stats: stats\n            })];\n        }\n      });\n    });\n  };\n  Mtcnn.prototype.forward = function (input, forwardParams) {\n    if (forwardParams === void 0) {\n      forwardParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [4 /*yield*/, _a.apply(this, [_b.sent(), forwardParams])];\n          case 2:\n            return [2 /*return*/, _b.sent().results];\n        }\n      });\n    });\n  };\n  Mtcnn.prototype.forwardWithStats = function (input, forwardParams) {\n    if (forwardParams === void 0) {\n      forwardParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent(), forwardParams])];\n        }\n      });\n    });\n  };\n  Mtcnn.prototype.getDefaultModelName = function () {\n    return 'mtcnn_model';\n  };\n  Mtcnn.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  Mtcnn.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return Mtcnn;\n}(NeuralNetwork);\nexport { Mtcnn };","map":{"version":3,"mappings":"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","names":["tf","Point","Rect","FaceDetection","FaceLandmarks5","toNetInput","extendWithFaceDetection","extendWithFaceLandmarks","NeuralNetwork","bgrToRgbTensor","CELL_SIZE","extractParams","extractParamsFromWeigthMap","getSizesForScale","MtcnnOptions","pyramidDown","stage1","stage2","stage3","__extends","_super","Mtcnn","weightsOrUrl","console","warn","load","filePath","loadFromDisk","input","forwardParams","params","Error","inputCanvas","canvases","stats","tsTotal","Date","now","imgTensor","tidy","expandDims","browser","fromPixels","toFloat","onReturn","results","dispose","total","_a","shape","slice","height","width","_b","minFaceSize","scaleFactor","maxNumScales","scoreThresholds","scaleSteps","scales","filter","sizes","scale","Math","min","pyramid","map","ts","pnet","out1","_c","total_stage1","boxes","length","stage2_numInputBoxes","rnet","out2","total_stage2","stage3_numInputBoxes","onet","out3","total_stage3","box","idx","scores","left","top","points","sub","div","forwardInput","weightMap","weights"],"sourceRoot":"","sources":["../../../src/mtcnn/Mtcnn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}