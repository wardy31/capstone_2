{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { seperateWeightMaps } from './util';\nvar FaceProcessor = /** @class */function (_super) {\n  __extends(FaceProcessor, _super);\n  function FaceProcessor(_name, faceFeatureExtractor) {\n    var _this = _super.call(this, _name) || this;\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n  Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FaceProcessor.prototype.runNet = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  };\n  FaceProcessor.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n  FaceProcessor.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n      params = _a.params,\n      paramMappings = _a.paramMappings;\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n  FaceProcessor.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  };\n  FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n      featureExtractorMap = _a.featureExtractorMap,\n      classifierMap = _a.classifierMap;\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n  FaceProcessor.prototype.extractParams = function (weights) {\n    var cIn = this.getClassifierChannelsIn();\n    var cOut = this.getClassifierChannelsOut();\n    var classifierWeightSize = cOut * cIn + cOut;\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n  return FaceProcessor;\n}(NeuralNetwork);\nexport { FaceProcessor };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAE3C,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,QAAQ,QAAQ,QAAQ;AAMjC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,0BAA0B,QAAQ,8BAA8B;AAEzE,SAASC,kBAAkB,QAAQ,QAAQ;AAE3C;EAGUC;EAIR,uBAAYC,KAAa,EAAEC,oBAA6D;IAAxF,YACEC,kBAAMF,KAAK,CAAC;IACZG,KAAI,CAACC,qBAAqB,GAAGH,oBAAoB;;EACnD;EAEAI,sBAAWC,+CAAoB;SAA/B;MACE,OAAO,IAAI,CAACF,qBAAqB;IACnC,CAAC;;;;EAMME,8BAAM,GAAb,UAAcC,KAA6B;IAA3C;IAEU,wBAAM;IAEd,IAAI,CAACC,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAI,IAAI,CAACT,KAAK,mCAAgC,CAAC;;IAGhE,OAAOR,EAAE,CAACkB,IAAI,CAAC;MACb,IAAMC,kBAAkB,GAAGJ,KAAK,YAAYb,QAAQ,GAChDS,KAAI,CAACF,oBAAoB,CAACW,YAAY,CAACL,KAAK,CAAC,GAC7CA,KAAK;MACT,OAAOd,mBAAmB,CAACkB,kBAAkB,CAACE,IAAI,CAACF,kBAAkB,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACO,EAAE,CAAC;IACjG,CAAC,CAAC;EACJ,CAAC;EAEMT,+BAAO,GAAd,UAAeU,gBAAgC;IAAhC;MAAAA,uBAAgC;IAAA;IAC7C,IAAI,CAACf,oBAAoB,CAACgB,OAAO,CAACD,gBAAgB,CAAC;IACnDd,iBAAMe,OAAO,YAACD,gBAAgB,CAAC;EACjC,CAAC;EAEMV,4CAAoB,GAA3B,UAA4BY,OAAqB;IACzC,8CAAiE;MAA/DV,kBAAM;MAAEW,gCAAuD;IACvE,IAAI,CAACC,OAAO,GAAGZ,MAAM;IACrB,IAAI,CAACa,cAAc,GAAGF,aAAa;EACrC,CAAC;EAEMb,+CAAuB,GAA9B,UAA+BY,OAAqB;IAClD,OAAOtB,aAAa,CAACsB,OAAO,EAAE,IAAI,CAACI,uBAAuB,EAAE,EAAE,IAAI,CAACC,wBAAwB,EAAE,CAAC;EAChG,CAAC;EAESjB,kDAA0B,GAApC,UAAqCkB,SAA4B;IAEzD,sCAAsE;MAApEC,4CAAmB;MAAEC,gCAA+C;IAE5E,IAAI,CAACzB,oBAAoB,CAAC0B,iBAAiB,CAACF,mBAAmB,CAAC;IAEhE,OAAO5B,0BAA0B,CAAC6B,aAAa,CAAC;EAClD,CAAC;EAESpB,qCAAa,GAAvB,UAAwBY,OAAqB;IAE3C,IAAMU,GAAG,GAAG,IAAI,CAACN,uBAAuB,EAAE;IAC1C,IAAMO,IAAI,GAAG,IAAI,CAACN,wBAAwB,EAAE;IAC5C,IAAMO,oBAAoB,GAAID,IAAI,GAAGD,GAAG,GAAKC,IAAI;IAEjD,IAAME,uBAAuB,GAAGb,OAAO,CAACc,KAAK,CAAC,CAAC,EAAEd,OAAO,CAACe,MAAM,GAAGH,oBAAoB,CAAC;IACvF,IAAMI,iBAAiB,GAAGhB,OAAO,CAACc,KAAK,CAACd,OAAO,CAACe,MAAM,GAAGH,oBAAoB,CAAC;IAE9E,IAAI,CAAC7B,oBAAoB,CAACkC,cAAc,CAACJ,uBAAuB,CAAC;IACjE,OAAO,IAAI,CAACK,uBAAuB,CAACF,iBAAiB,CAAC;EACxD,CAAC;EACH,oBAAC;AAAD,CAAC,CArESvC,aAAa","names":["tf","fullyConnectedLayer","NetInput","NeuralNetwork","extractParams","extractParamsFromWeigthMap","seperateWeightMaps","__extends","_name","faceFeatureExtractor","_super","_this","_faceFeatureExtractor","Object","FaceProcessor","input","params","Error","tidy","bottleneckFeatures","forwardInput","as2D","shape","fc","throwOnRedispose","dispose","weights","paramMappings","_params","_paramMappings","getClassifierChannelsIn","getClassifierChannelsOut","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","cIn","cOut","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights","extractClassifierParams"],"sourceRoot":"","sources":["../../../src/faceProcessor/FaceProcessor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}