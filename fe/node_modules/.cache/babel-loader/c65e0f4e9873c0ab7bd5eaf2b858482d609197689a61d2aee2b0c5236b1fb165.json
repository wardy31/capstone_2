{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { residual, residualDown } from './residualLayer';\nvar FaceRecognitionNet = /** @class */function (_super) {\n  __extends(FaceRecognitionNet, _super);\n  function FaceRecognitionNet() {\n    return _super.call(this, 'FaceRecognitionNet') || this;\n  }\n  FaceRecognitionNet.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(150, true).toFloat();\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = convDown(normalized, params.conv32_down);\n      out = tf.maxPool(out, 3, 2, 'valid');\n      out = residual(out, params.conv32_1);\n      out = residual(out, params.conv32_2);\n      out = residual(out, params.conv32_3);\n      out = residualDown(out, params.conv64_down);\n      out = residual(out, params.conv64_1);\n      out = residual(out, params.conv64_2);\n      out = residual(out, params.conv64_3);\n      out = residualDown(out, params.conv128_down);\n      out = residual(out, params.conv128_1);\n      out = residual(out, params.conv128_2);\n      out = residualDown(out, params.conv256_down);\n      out = residual(out, params.conv256_1);\n      out = residual(out, params.conv256_2);\n      out = residualDown(out, params.conv256_down_out);\n      var globalAvg = out.mean([1, 2]);\n      var fullyConnected = tf.matMul(globalAvg, params.fc);\n      return fullyConnected;\n    });\n  };\n  FaceRecognitionNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.computeFaceDescriptor = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, faceDescriptorTensors, faceDescriptorsForBatch;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            faceDescriptorTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4 /*yield*/, Promise.all(faceDescriptorTensors.map(function (t) {\n              return t.data();\n            }))];\n          case 2:\n            faceDescriptorsForBatch = _a.sent();\n            faceDescriptorTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2 /*return*/, netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.getDefaultModelName = function () {\n    return 'face_recognition_model';\n  };\n  FaceRecognitionNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  FaceRecognitionNet.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return FaceRecognitionNet;\n}(NeuralNetwork);\nexport { FaceRecognitionNet };","map":{"version":3,"mappings":"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","names":["tf","toNetInput","NeuralNetwork","normalize","convDown","extractParams","extractParamsFromWeigthMap","residual","residualDown","__extends","_super","FaceRecognitionNet","input","params","Error","tidy","batchTensor","toBatchTensor","toFloat","meanRgb","normalized","div","scalar","out","conv32_down","maxPool","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","globalAvg","mean","fullyConnected","matMul","fc","_a","forwardInput","_b","netInput","faceDescriptorTensors","unstack","_this","Promise","all","map","data","faceDescriptorsForBatch","forEach","dispose","isBatchInput","weightMap","weights"],"sourceRoot":"","sources":["../../../src/faceRecognitionNet/FaceRecognitionNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}