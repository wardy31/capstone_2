{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { env } from '../env';\nimport { padToSquare } from '../ops/padToSquare';\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils';\nimport { createCanvasFromMedia } from './createCanvas';\nimport { imageToSquare } from './imageToSquare';\nvar NetInput = /** @class */function () {\n  function NetInput(inputs, treatAsBatchInput) {\n    var _this = this;\n    if (treatAsBatchInput === void 0) {\n      treatAsBatchInput = false;\n    }\n    this._imageTensors = [];\n    this._canvases = [];\n    this._treatAsBatchInput = false;\n    this._inputDimensions = [];\n    if (!Array.isArray(inputs)) {\n      throw new Error(\"NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have \" + inputs);\n    }\n    this._treatAsBatchInput = treatAsBatchInput;\n    this._batchSize = inputs.length;\n    inputs.forEach(function (input, idx) {\n      if (isTensor3D(input)) {\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape;\n        return;\n      }\n      if (isTensor4D(input)) {\n        var batchSize = input.shape[0];\n        if (batchSize !== 1) {\n          throw new Error(\"NetInput - tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\n        }\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape.slice(1);\n        return;\n      }\n      var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);\n      _this._canvases[idx] = canvas;\n      _this._inputDimensions[idx] = [canvas.height, canvas.width, 3];\n    });\n  }\n  Object.defineProperty(NetInput.prototype, \"imageTensors\", {\n    get: function () {\n      return this._imageTensors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"canvases\", {\n    get: function () {\n      return this._canvases;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"isBatchInput\", {\n    get: function () {\n      return this.batchSize > 1 || this._treatAsBatchInput;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"batchSize\", {\n    get: function () {\n      return this._batchSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputDimensions\", {\n    get: function () {\n      return this._inputDimensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputSize\", {\n    get: function () {\n      return this._inputSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"reshapedInputDimensions\", {\n    get: function () {\n      var _this = this;\n      return range(this.batchSize, 0, 1).map(function (_, batchIdx) {\n        return _this.getReshapedInputDimensions(batchIdx);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  NetInput.prototype.getInput = function (batchIdx) {\n    return this.canvases[batchIdx] || this.imageTensors[batchIdx];\n  };\n  NetInput.prototype.getInputDimensions = function (batchIdx) {\n    return this._inputDimensions[batchIdx];\n  };\n  NetInput.prototype.getInputHeight = function (batchIdx) {\n    return this._inputDimensions[batchIdx][0];\n  };\n  NetInput.prototype.getInputWidth = function (batchIdx) {\n    return this._inputDimensions[batchIdx][1];\n  };\n  NetInput.prototype.getReshapedInputDimensions = function (batchIdx) {\n    if (typeof this.inputSize !== 'number') {\n      throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');\n    }\n    var width = this.getInputWidth(batchIdx);\n    var height = this.getInputHeight(batchIdx);\n    return computeReshapedDimensions({\n      width: width,\n      height: height\n    }, this.inputSize);\n  };\n  /**\r\n   * Create a batch tensor from all input canvases and tensors\r\n   * with size [batchSize, inputSize, inputSize, 3].\r\n   *\r\n   * @param inputSize Height and width of the tensor.\r\n   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\r\n   * both sides of the minor dimension oof the image.\r\n   * @returns The batch tensor.\r\n   */\n  NetInput.prototype.toBatchTensor = function (inputSize, isCenterInputs) {\n    var _this = this;\n    if (isCenterInputs === void 0) {\n      isCenterInputs = true;\n    }\n    this._inputSize = inputSize;\n    return tf.tidy(function () {\n      var inputTensors = range(_this.batchSize, 0, 1).map(function (batchIdx) {\n        var input = _this.getInput(batchIdx);\n        if (input instanceof tf.Tensor) {\n          var imgTensor = isTensor4D(input) ? input : input.expandDims();\n          imgTensor = padToSquare(imgTensor, isCenterInputs);\n          if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\n            imgTensor = tf.image.resizeBilinear(imgTensor, [inputSize, inputSize]);\n          }\n          return imgTensor.as3D(inputSize, inputSize, 3);\n        }\n        if (input instanceof env.getEnv().Canvas) {\n          return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs));\n        }\n        throw new Error(\"toBatchTensor - at batchIdx \" + batchIdx + \", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have \" + input);\n      });\n      var batchTensor = tf.stack(inputTensors.map(function (t) {\n        return t.toFloat();\n      })).as4D(_this.batchSize, inputSize, inputSize, 3);\n      return batchTensor;\n    });\n  };\n  return NetInput;\n}();\nexport { NetInput };","map":{"version":3,"mappings":"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","names":["tf","env","padToSquare","computeReshapedDimensions","isTensor3D","isTensor4D","range","createCanvasFromMedia","imageToSquare","inputs","treatAsBatchInput","Array","isArray","Error","_treatAsBatchInput","_batchSize","length","forEach","input","idx","_this","_imageTensors","_inputDimensions","shape","batchSize","slice","canvas","getEnv","Canvas","_canvases","height","width","Object","NetInput","_inputSize","map","_","batchIdx","getReshapedInputDimensions","canvases","imageTensors","inputSize","getInputWidth","getInputHeight","isCenterInputs","tidy","inputTensors","getInput","Tensor","imgTensor","expandDims","image","resizeBilinear","as3D","browser","fromPixels","batchTensor","stack","toFloat","as4D"],"sourceRoot":"","sources":["../../../src/dom/NetInput.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}