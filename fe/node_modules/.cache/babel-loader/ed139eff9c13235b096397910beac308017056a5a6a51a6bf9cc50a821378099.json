{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nexport default {\n  props: [\"dialog\", \"updateData\"],\n  computed: {\n    ...mapState({\n      loading: state => state.questions.update.loading,\n      error: state => state.questions.update.error\n    })\n  },\n  watch: {\n    updateData() {\n      if (this.updateData) {\n        console.log(this.updateData);\n        this.id = this.updateData.id;\n        this.question = this.updateData[\"question\"];\n        // this.sub_question = this.updateData[\"sub_question\"];\n        this.arraySub = this.updateData[\"sub_question\"].split(',');\n      }\n    }\n  },\n  data() {\n    return {\n      id: null,\n      question: \"\",\n      sub_question: \"\",\n      arraySub: []\n    };\n  },\n  methods: {\n    async submit() {\n      const subTrim = this.arraySub.filter(e => e.trim() != \"\");\n      const res = await this.$store.dispatch(\"questions/update\", {\n        id: this.id,\n        question: this.question,\n        sub_question: subTrim.join()\n      });\n      if (res) {\n        this.question = \"\";\n        this.sub_question = \"\";\n        this.id = null;\n        this.$emit(\"handleDialog\");\n        this.$emit(\"snackBar\");\n        this.$emit(\"handleUpdateData\");\n      }\n    },\n    async handleDialog() {\n      this.$emit(\"handleDialog\");\n      this.$emit(\"handleUpdateData\");\n    },\n    removeSub(data) {\n      const subs = this.arraySub;\n      const filter = subs.filter((e, index) => {\n        return index != data;\n      });\n      this.arraySub = filter;\n    },\n    async addRow() {\n      this.arraySub.push(\"\");\n    }\n  }\n};","map":{"version":3,"mappings":";AA8EA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;QACAC;QACA;QACA;QACA;QACA;MACA;IACA;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;MACA;QACAJ;QACAC;QACAC;MACA;MACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;MACA;MACA;IACA;IACAG;MACA;MACA;QACA;MACA;MAEA;IACA;IACA;MACA;IACA;EACA;AACA","names":["props","computed","loading","error","watch","updateData","console","data","id","question","sub_question","arraySub","methods","removeSub"],"sourceRoot":"src/views/admin/Dialog/Form","sources":["UpdateDialog.vue"],"sourcesContent":["<template>\n  <v-dialog :value=\"dialog\" fullscreen transition=\"dialog-bottom-transition\">\n    <v-card color=\"accent text-capitalize\">\n      <v-toolbar color=\"primary\">\n        <v-btn @click=\"handleDialog\" icon large color=\"accent\"\n          ><v-icon>close</v-icon></v-btn\n        >\n        <v-toolbar-title class=\"accent--text font-weight-bold\"\n          >Update Form</v-toolbar-title\n        >\n        <v-spacer></v-spacer>\n      </v-toolbar>\n      <v-container>\n        <v-card width=\"420\" flat color=\"transparent\">\n          <div class=\"d-flex align-center justify-space-between\">\n            <h2 class=\"font-weight-regular mb-4 mt-4\">Question Details</h2>\n            <v-btn\n              color=\"primary\"\n              class=\"px-6 py-5 text-capitalize font-weight-bold\"\n              small\n              text\n              @click=\"addRow()\"\n            >\n              <v-icon>add</v-icon>\n              Add Sub Row\n            </v-btn>\n          </div>\n\n          <v-row dense>\n            <v-text-field\n              filled\n              outlined\n              :error-messages=\"error.question?.length ? error.question : false\"\n              label=\"Question Name\"\n              v-model=\"question\"\n            ></v-text-field>\n            \n            <div v-show=\"sub_question.split(',').length\">\n            <div v-for=\"(subs, index) in arraySub\" :key=\"index\">\n              <div class=\"d-flex\">\n                <v-text-field\n                  filled\n                  outlined\n                  label=\"Sub List Name\"\n                  v-model=\"arraySub[index]\"\n                ></v-text-field>\n\n                <v-btn\n                  class=\"mt-2 ml-2 text-capitalize\"\n                  color=\"error\"\n                  icon\n                  @click=\"removeSub(index)\"\n                >\n                  <v-icon>delete</v-icon>\n                </v-btn>\n              </div>\n            </div>\n          </div>\n          </v-row>\n          <v-row dense class=\"mt-n2\">\n            <v-col md=\"2\">\n              <v-btn\n                color=\"primary\"\n                block\n                :loading=\"loading\"\n                class=\"px-12 py-5 text-capitalize font-weight-bold\"\n                @click=\"submit()\"\n                >Update Form</v-btn\n              >\n            </v-col>\n          </v-row>\n        </v-card>\n      </v-container>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  props: [\"dialog\", \"updateData\"],\n  computed: {\n    ...mapState({\n      loading: (state) => state.questions.update.loading,\n      error: (state) => state.questions.update.error,\n    }),\n  },\n  watch: {\n    updateData() {\n      if (this.updateData) {\n        console.log(this.updateData);\n        this.id = this.updateData.id\n        this.question = this.updateData[\"question\"];\n        // this.sub_question = this.updateData[\"sub_question\"];\n        this.arraySub = this.updateData[\"sub_question\"].split(',')\n      }\n    },\n  },\n  data() {\n    return {\n      id: null,\n      question: \"\",\n      sub_question: \"\",\n      arraySub:[]\n    };\n  },\n  methods: {\n    async submit() {\n      const subTrim = this.arraySub.filter((e) => e.trim() != \"\");\n      const res = await this.$store.dispatch(\"questions/update\", {\n        id:this.id,\n        question: this.question,\n        sub_question: subTrim.join(),\n      });\n      if (res) {\n        this.question = \"\";\n        this.sub_question = \"\";\n        this.id = null;\n        this.$emit(\"handleDialog\");\n        this.$emit(\"snackBar\");\n        this.$emit(\"handleUpdateData\");\n      }\n    },\n    async handleDialog() {\n      this.$emit(\"handleDialog\");\n      this.$emit(\"handleUpdateData\");\n    },\n    removeSub(data) {\n      const subs = this.arraySub;\n      const filter = subs.filter((e, index) => {\n        return index != data;\n      });\n\n      this.arraySub = filter;\n    },\n    async addRow() {\n      this.arraySub.push(\"\");\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}