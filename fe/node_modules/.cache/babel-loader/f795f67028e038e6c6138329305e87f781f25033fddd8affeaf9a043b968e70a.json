{"ast":null,"code":"import { minBbox } from '../ops';\nimport { getCenterPoint } from '../utils';\nimport { Box } from './Box';\nimport { Dimensions } from './Dimensions';\nimport { FaceDetection } from './FaceDetection';\nimport { Point } from './Point';\nimport { Rect } from './Rect';\n// face alignment constants\nvar relX = 0.5;\nvar relY = 0.43;\nvar relScale = 0.45;\nvar FaceLandmarks = /** @class */function () {\n  function FaceLandmarks(relativeFaceLandmarkPositions, imgDims, shift) {\n    if (shift === void 0) {\n      shift = new Point(0, 0);\n    }\n    var width = imgDims.width,\n      height = imgDims.height;\n    this._imgDims = new Dimensions(width, height);\n    this._shift = shift;\n    this._positions = relativeFaceLandmarkPositions.map(function (pt) {\n      return pt.mul(new Point(width, height)).add(shift);\n    });\n  }\n  Object.defineProperty(FaceLandmarks.prototype, \"shift\", {\n    get: function () {\n      return new Point(this._shift.x, this._shift.y);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FaceLandmarks.prototype, \"imageWidth\", {\n    get: function () {\n      return this._imgDims.width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FaceLandmarks.prototype, \"imageHeight\", {\n    get: function () {\n      return this._imgDims.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FaceLandmarks.prototype, \"positions\", {\n    get: function () {\n      return this._positions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FaceLandmarks.prototype, \"relativePositions\", {\n    get: function () {\n      var _this = this;\n      return this._positions.map(function (pt) {\n        return pt.sub(_this._shift).div(new Point(_this.imageWidth, _this.imageHeight));\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FaceLandmarks.prototype.forSize = function (width, height) {\n    return new this.constructor(this.relativePositions, {\n      width: width,\n      height: height\n    });\n  };\n  FaceLandmarks.prototype.shiftBy = function (x, y) {\n    return new this.constructor(this.relativePositions, this._imgDims, new Point(x, y));\n  };\n  FaceLandmarks.prototype.shiftByPoint = function (pt) {\n    return this.shiftBy(pt.x, pt.y);\n  };\n  /**\r\n   * Aligns the face landmarks after face detection from the relative positions of the faces\r\n   * bounding box, or it's current shift. This function should be used to align the face images\r\n   * after face detection has been performed, before they are passed to the face recognition net.\r\n   * This will make the computed face descriptor more accurate.\r\n   *\r\n   * @param detection (optional) The bounding box of the face or the face detection result. If\r\n   * no argument was passed the position of the face landmarks are assumed to be relative to\r\n   * it's current shift.\r\n   * @returns The bounding box of the aligned face.\r\n   */\n  FaceLandmarks.prototype.align = function (detection, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (detection) {\n      var box = detection instanceof FaceDetection ? detection.box.floor() : new Box(detection);\n      return this.shiftBy(box.x, box.y).align(null, options);\n    }\n    var _a = Object.assign({}, {\n        useDlibAlignment: false,\n        minBoxPadding: 0.2\n      }, options),\n      useDlibAlignment = _a.useDlibAlignment,\n      minBoxPadding = _a.minBoxPadding;\n    if (useDlibAlignment) {\n      return this.alignDlib();\n    }\n    return this.alignMinBbox(minBoxPadding);\n  };\n  FaceLandmarks.prototype.alignDlib = function () {\n    var centers = this.getRefPointsForAlignment();\n    var leftEyeCenter = centers[0],\n      rightEyeCenter = centers[1],\n      mouthCenter = centers[2];\n    var distToMouth = function (pt) {\n      return mouthCenter.sub(pt).magnitude();\n    };\n    var eyeToMouthDist = (distToMouth(leftEyeCenter) + distToMouth(rightEyeCenter)) / 2;\n    var size = Math.floor(eyeToMouthDist / relScale);\n    var refPoint = getCenterPoint(centers);\n    // TODO: pad in case rectangle is out of image bounds\n    var x = Math.floor(Math.max(0, refPoint.x - relX * size));\n    var y = Math.floor(Math.max(0, refPoint.y - relY * size));\n    return new Rect(x, y, Math.min(size, this.imageWidth + x), Math.min(size, this.imageHeight + y));\n  };\n  FaceLandmarks.prototype.alignMinBbox = function (padding) {\n    var box = minBbox(this.positions);\n    return box.pad(box.width * padding, box.height * padding);\n  };\n  FaceLandmarks.prototype.getRefPointsForAlignment = function () {\n    throw new Error('getRefPointsForAlignment not implemented by base class');\n  };\n  return FaceLandmarks;\n}();\nexport { FaceLandmarks };","map":{"version":3,"mappings":"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","names":["minBbox","getCenterPoint","Box","Dimensions","FaceDetection","Point","Rect","relX","relY","relScale","relativeFaceLandmarkPositions","imgDims","shift","height","_imgDims","width","_shift","_positions","map","mul","add","Object","FaceLandmarks","x","y","sub","_this","div","imageWidth","imageHeight","constructor","relativePositions","pt","shiftBy","detection","options","box","floor","align","useDlibAlignment","minBoxPadding","alignDlib","alignMinBbox","centers","getRefPointsForAlignment","rightEyeCenter","mouthCenter","distToMouth","magnitude","eyeToMouthDist","leftEyeCenter","size","Math","refPoint","max","min","padding","positions","pad","Error"],"sourceRoot":"","sources":["../../../src/classes/FaceLandmarks.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}