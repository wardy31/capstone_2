{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\r\n * A socket.io Encoder instance\r\n */\nexport class Encoder {\n  /**\r\n   * Encoder constructor\r\n   *\r\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n   */\n  constructor(replacer) {\n    this.replacer = replacer;\n  }\n  /**\r\n   * Encode a packet as a single string if non-binary, or as a\r\n   * buffer sequence, depending on packet type.\r\n   *\r\n   * @param {Object} obj - packet object\r\n   */\n  encode(obj) {\n    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n      if (hasBinary(obj)) {\n        return this.encodeAsBinary({\n          type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n          nsp: obj.nsp,\n          data: obj.data,\n          id: obj.id\n        });\n      }\n    }\n    return [this.encodeAsString(obj)];\n  }\n  /**\r\n   * Encode packet as string.\r\n   */\n  encodeAsString(obj) {\n    // first is type\n    let str = \"\" + obj.type;\n    // attachments if we have them\n    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n      str += obj.attachments + \"-\";\n    }\n    // if we have a namespace other than `/`\n    // we append it followed by a comma `,`\n    if (obj.nsp && \"/\" !== obj.nsp) {\n      str += obj.nsp + \",\";\n    }\n    // immediately followed by the id\n    if (null != obj.id) {\n      str += obj.id;\n    }\n    // json data\n    if (null != obj.data) {\n      str += JSON.stringify(obj.data, this.replacer);\n    }\n    return str;\n  }\n  /**\r\n   * Encode packet as 'buffer sequence' by removing blobs, and\r\n   * deconstructing packet into object with placeholders and\r\n   * a list of buffers.\r\n   */\n  encodeAsBinary(obj) {\n    const deconstruction = deconstructPacket(obj);\n    const pack = this.encodeAsString(deconstruction.packet);\n    const buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n    return buffers; // write all the buffers\n  }\n}\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\nexport class Decoder extends Emitter {\n  /**\r\n   * Decoder constructor\r\n   *\r\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n   */\n  constructor(reviver) {\n    super();\n    this.reviver = reviver;\n  }\n  /**\r\n   * Decodes an encoded packet string into packet JSON.\r\n   *\r\n   * @param {String} obj - encoded packet\r\n   */\n  add(obj) {\n    let packet;\n    if (typeof obj === \"string\") {\n      if (this.reconstructor) {\n        throw new Error(\"got plaintext data when reconstructing a packet\");\n      }\n      packet = this.decodeString(obj);\n      const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n      if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n        packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n        // binary packet's json\n        this.reconstructor = new BinaryReconstructor(packet);\n        // no attachments, labeled binary but no binary data to follow\n        if (packet.attachments === 0) {\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else {\n        // non-binary full packet\n        super.emitReserved(\"decoded\", packet);\n      }\n    } else if (isBinary(obj) || obj.base64) {\n      // raw binary data\n      if (!this.reconstructor) {\n        throw new Error(\"got binary data when not reconstructing a packet\");\n      } else {\n        packet = this.reconstructor.takeBinaryData(obj);\n        if (packet) {\n          // received final buffer\n          this.reconstructor = null;\n          super.emitReserved(\"decoded\", packet);\n        }\n      }\n    } else {\n      throw new Error(\"Unknown type: \" + obj);\n    }\n  }\n  /**\r\n   * Decode a packet String (JSON data)\r\n   *\r\n   * @param {String} str\r\n   * @return {Object} packet\r\n   */\n  decodeString(str) {\n    let i = 0;\n    // look up type\n    const p = {\n      type: Number(str.charAt(0))\n    };\n    if (PacketType[p.type] === undefined) {\n      throw new Error(\"unknown packet type \" + p.type);\n    }\n    // look up attachments if type binary\n    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n      const start = i + 1;\n      while (str.charAt(++i) !== \"-\" && i != str.length) {}\n      const buf = str.substring(start, i);\n      if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n        throw new Error(\"Illegal attachments\");\n      }\n      p.attachments = Number(buf);\n    }\n    // look up namespace (if any)\n    if (\"/\" === str.charAt(i + 1)) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (\",\" === c) break;\n        if (i === str.length) break;\n      }\n      p.nsp = str.substring(start, i);\n    } else {\n      p.nsp = \"/\";\n    }\n    // look up id\n    const next = str.charAt(i + 1);\n    if (\"\" !== next && Number(next) == next) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (null == c || Number(c) != c) {\n          --i;\n          break;\n        }\n        if (i === str.length) break;\n      }\n      p.id = Number(str.substring(start, i + 1));\n    }\n    // look up json data\n    if (str.charAt(++i)) {\n      const payload = this.tryParse(str.substr(i));\n      if (Decoder.isPayloadValid(p.type, payload)) {\n        p.data = payload;\n      } else {\n        throw new Error(\"invalid payload\");\n      }\n    }\n    return p;\n  }\n  tryParse(str) {\n    try {\n      return JSON.parse(str, this.reviver);\n    } catch (e) {\n      return false;\n    }\n  }\n  static isPayloadValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return typeof payload === \"object\";\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || typeof payload === \"object\";\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        return Array.isArray(payload) && payload.length > 0;\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        return Array.isArray(payload);\n    }\n  }\n  /**\r\n   * Deallocates a parser's resources\r\n   */\n  destroy() {\n    if (this.reconstructor) {\n      this.reconstructor.finishedReconstruction();\n      this.reconstructor = null;\n    }\n  }\n}\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\nclass BinaryReconstructor {\n  constructor(packet) {\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\r\n   * Method to be called when binary data received from connection\r\n   * after a BINARY_EVENT packet.\r\n   *\r\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n   * @return {null | Object} returns null if more binary data is expected or\r\n   *   a reconstructed packet object if all buffers have been received.\r\n   */\n  takeBinaryData(binData) {\n    this.buffers.push(binData);\n    if (this.buffers.length === this.reconPack.attachments) {\n      // done with buffer list\n      const packet = reconstructPacket(this.reconPack, this.buffers);\n      this.finishedReconstruction();\n      return packet;\n    }\n    return null;\n  }\n  /**\r\n   * Cleans up binary packet reconstruction variables.\r\n   */\n  finishedReconstruction() {\n    this.reconPack = null;\n    this.buffers = [];\n  }\n}","map":{"version":3,"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","protocol","PacketType","Encoder","constructor","replacer","encode","obj","type","EVENT","ACK","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","data","id","encodeAsString","str","attachments","JSON","stringify","deconstruction","pack","packet","buffers","unshift","Decoder","reviver","add","reconstructor","Error","decodeString","isBinaryEvent","BinaryReconstructor","emitReserved","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","destroy","finishedReconstruction","reconPack","binData","push"],"sources":["C:/Users/Rainiel GGOS/Desktop/capstone_2/fe/node_modules/socket.io-parser/build/esm/index.js"],"sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\r\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\r\nimport { isBinary, hasBinary } from \"./is-binary.js\";\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport const protocol = 5;\r\nexport var PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType || (PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nexport class Encoder {\r\n    /**\r\n     * Encoder constructor\r\n     *\r\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\r\n     */\r\n    constructor(replacer) {\r\n        this.replacer = replacer;\r\n    }\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (hasBinary(obj)) {\r\n                return this.encodeAsBinary({\r\n                    type: obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK,\r\n                    nsp: obj.nsp,\r\n                    data: obj.data,\r\n                    id: obj.id,\r\n                });\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data, this.replacer);\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nexport class Decoder extends Emitter {\r\n    /**\r\n     * Decoder constructor\r\n     *\r\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\r\n     */\r\n    constructor(reviver) {\r\n        super();\r\n        this.reviver = reviver;\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            if (this.reconstructor) {\r\n                throw new Error(\"got plaintext data when reconstructing a packet\");\r\n            }\r\n            packet = this.decodeString(obj);\r\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\r\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\r\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = this.tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n    tryParse(str) {\r\n        try {\r\n            return JSON.parse(str, this.reviver);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n            this.reconstructor = null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}