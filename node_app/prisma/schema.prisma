// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  firstName             String                  @map("first_name")
  lastName              String                  @map("last_name")
  middleName            String?                 @map("middle_name")
  gender                String                  @map("gender")
  role                  Role                    @map("role")
  department            String?                 @map("department")
  address               String
  vaccineStatus         String?                 @map("vaccine_status")
  contactNumber         String?                 @map("contact_number")
  email                 String?
  username              String
  password              String
  isClinicStaff         Boolean                 @default(false) @map("is_clinic_staff")
  imagesPath            String?                 @map("image_path")
  createdAt             DateTime                @default(now()) @map("created_at")
  UserAlertNotification UserAlertNotification[]
  UserLocationHistory   UserLocationHistory[]
  InfectedUser          InfectedUser[]
  ExposedUser           ExposedUser[]
  UserResponse          UserResponse[]

  @@map("users")
}

model Station {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  isActive              Boolean                 @default(true) @map("is_active")
  username              String
  password              String
  createdAt             DateTime                @default(now()) @map("created_at")
  UserAlertNotification UserAlertNotification[]
  UserLocationHistory   UserLocationHistory[]

  @@map("stations")
}

model UserAlertNotification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  stationId Int      @map("station_id")
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  station Station @relation(fields: [stationId], references: [id])

  @@map("user_alert_notifications")
}

model UserLocationHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  stationId Int      @map("station_id")

  station Station @relation(fields: [stationId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("user_location_histories")
}

model InfectedUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  status    String?
  // duration  Int      @map("duration")
  // isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  user        User          @relation(fields: [userId], references: [id])
  ExposedUser ExposedUser[]

  @@map("infected_users")
}

model ExposedUser {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  infectedUserId Int      @map("infected_user_id")
  status         String?
  // duration       Int      @map("duration")
  // isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  user         User         @relation(fields: [userId], references: [id])
  infectedUser InfectedUser @relation(fields: [infectedUserId], references: [id], onDelete: Cascade)

  @@map("exposed_users")
}

model UserResponse {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  UserAnswer UserAnswer[]

  @@map("user_responses")
}

model Questionnaire {
  id         Int          @id @default(autoincrement())
  title      String       @db.LongText
  subtitle   String
  createdAt  DateTime     @default(now())
  UserAnswer UserAnswer[]

  @@map("questionnaires")
}

model UserAnswer {
  id              Int      @id @default(autoincrement())
  userResponseId  Int      @map("user_response_id")
  questionnaireId Int      @map("questionnaire_id")
  answer          String
  createdAt       DateTime @default(now()) @map("created_at")

  userResponse  UserResponse  @relation(fields: [userResponseId], references: [id])
  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

enum Role {
  clinic
  student
  employee
  visitor
}
