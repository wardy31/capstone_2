generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answers {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_response_id BigInt         @db.UnsignedBigInt
  questionnaire_id BigInt         @db.UnsignedBigInt
  answer           Boolean
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  questionnaires   questionnaires @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade, map: "answers_questionnaire_id_foreign")
  user_responses   user_responses @relation(fields: [user_response_id], references: [id], onDelete: Cascade, map: "answers_user_response_id_foreign")

  @@index([questionnaire_id], map: "answers_questionnaire_id_foreign")
  @@index([user_response_id], map: "answers_user_response_id_foreign")
}

model classifications {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String          @db.VarChar(255)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  user_accounts user_accounts[]
}

model classified_as_contacts {
  id                  BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  user_patient_id     BigInt              @db.UnsignedBigInt
  user_tagged_id      BigInt              @db.UnsignedBigInt
  contact_category_id BigInt?             @db.UnsignedBigInt
  is_active           Boolean             @default(true)
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  contact_categories  contact_categories? @relation(fields: [contact_category_id], references: [id], onDelete: Cascade, map: "classified_as_contacts_contact_category_id_foreign")
  user_patients       user_patients       @relation(fields: [user_patient_id], references: [id], onDelete: Cascade, map: "classified_as_contacts_user_patient_id_foreign")
  user_taggeds        user_taggeds        @relation(fields: [user_tagged_id], references: [id], onDelete: Cascade, map: "classified_as_contacts_user_tagged_id_foreign")

  @@index([contact_category_id], map: "classified_as_contacts_contact_category_id_foreign")
  @@index([user_patient_id], map: "classified_as_contacts_user_patient_id_foreign")
  @@index([user_tagged_id], map: "classified_as_contacts_user_tagged_id_foreign")
}

model classified_close_contacts {
  id                                                                     BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  patient_user_id                                                        BigInt             @db.UnsignedBigInt
  contact_user_id                                                        BigInt             @db.UnsignedBigInt
  contact_category_id                                                    BigInt             @db.UnsignedBigInt
  duration                                                               String             @db.VarChar(255)
  is_active                                                              Boolean
  created_at                                                             DateTime?          @db.Timestamp(0)
  updated_at                                                             DateTime?          @db.Timestamp(0)
  contact_categories                                                     contact_categories @relation(fields: [contact_category_id], references: [id], onDelete: Cascade, map: "classified_close_contacts_contact_category_id_foreign")
  user_accounts_classified_close_contacts_contact_user_idTouser_accounts user_accounts      @relation("classified_close_contacts_contact_user_idTouser_accounts", fields: [contact_user_id], references: [id], onDelete: Cascade, map: "classified_close_contacts_contact_user_id_foreign")
  user_accounts_classified_close_contacts_patient_user_idTouser_accounts user_accounts      @relation("classified_close_contacts_patient_user_idTouser_accounts", fields: [patient_user_id], references: [id], onDelete: Cascade, map: "classified_close_contacts_patient_user_id_foreign")

  @@index([contact_category_id], map: "classified_close_contacts_contact_category_id_foreign")
  @@index([contact_user_id], map: "classified_close_contacts_contact_user_id_foreign")
  @@index([patient_user_id], map: "classified_close_contacts_patient_user_id_foreign")
}

model clinic_accounts {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  first_name     String    @db.VarChar(255)
  middle_name    String    @db.VarChar(255)
  last_name      String    @db.VarChar(255)
  gender         String    @db.VarChar(255)
  contact_number String    @db.Char(11)
  email          String    @db.VarChar(255)
  username       String    @db.VarChar(255)
  password       String    @db.VarChar(255)
  role_id        BigInt    @db.UnsignedBigInt
  is_approve     Boolean   @default(false)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  roles          roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "clinic_accounts_role_id_foreign")

  @@index([role_id], map: "clinic_accounts_role_id_foreign")
}

model contact_categories {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  category                  String                      @db.VarChar(255)
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  classified_as_contacts    classified_as_contacts[]
  classified_close_contacts classified_close_contacts[]
}

model follow_ups {
  id               BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id  BigInt        @db.UnsignedBigInt
  follow_up_status String        @db.VarChar(255)
  created_at       DateTime?     @db.Timestamp(0)
  updated_at       DateTime?     @db.Timestamp(0)
  user_accounts    user_accounts @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "follow_ups_user_account_id_foreign")

  @@index([user_account_id], map: "follow_ups_user_account_id_foreign")
}

model health_forms {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id BigInt        @db.UnsignedBigInt
  question        String        @db.VarChar(255)
  answer          String        @db.VarChar(255)
  by_order        String?       @db.VarChar(255)
  added_at        DateTime?     @db.Timestamp(0)
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  user_accounts   user_accounts @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "health_forms_user_account_id_foreign")

  @@index([user_account_id], map: "health_forms_user_account_id_foreign")
}

model locations {
  id                       BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  name                     String                     @db.VarChar(255)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  station_accounts         station_accounts[]
  visited_location_records visited_location_records[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model questionnaires {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  question     String    @db.LongText
  sub_question String?   @db.LongText
  required     Boolean
  type         String?   @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  answers      answers[]
}

model roles {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  clinic_accounts clinic_accounts[]
}

model station_accounts {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  location_id BigInt    @db.UnsignedBigInt
  username    String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  is_active   Boolean   @default(true)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  locations   locations @relation(fields: [location_id], references: [id], onDelete: Cascade, map: "station_accounts_location_id_foreign")

  @@index([location_id], map: "station_accounts_location_id_foreign")
}

model user_accounts {
  id                                                                                 BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  first_name                                                                         String                      @db.VarChar(255)
  middle_name                                                                        String                      @db.VarChar(255)
  last_name                                                                          String                      @db.VarChar(255)
  gender                                                                             String                      @db.VarChar(255)
  address                                                                            String                      @db.VarChar(255)
  email                                                                              String                      @db.VarChar(255)
  department                                                                         String                      @db.VarChar(255)
  contact_number                                                                     String                      @db.Char(11)
  classification_id                                                                  BigInt                      @db.UnsignedBigInt
  vaccination_status                                                                 String                      @db.VarChar(255)
  images_path                                                                        String?                     @db.VarChar(255)
  username                                                                           String                      @db.VarChar(255)
  password                                                                           String                      @db.VarChar(255)
  created_at                                                                         DateTime?                   @db.Timestamp(0)
  updated_at                                                                         DateTime?                   @db.Timestamp(0)
  classified_close_contacts_classified_close_contacts_contact_user_idTouser_accounts classified_close_contacts[] @relation("classified_close_contacts_contact_user_idTouser_accounts")
  classified_close_contacts_classified_close_contacts_patient_user_idTouser_accounts classified_close_contacts[] @relation("classified_close_contacts_patient_user_idTouser_accounts")
  follow_ups                                                                         follow_ups[]
  health_forms                                                                       health_forms[]
  classifications                                                                    classifications             @relation(fields: [classification_id], references: [id], onDelete: Cascade, map: "user_accounts_classification_id_foreign")
  user_patients                                                                      user_patients[]
  user_responses                                                                     user_responses[]
  user_taggeds                                                                       user_taggeds[]
  visited_location_records                                                           visited_location_records[]

  @@index([classification_id], map: "user_accounts_classification_id_foreign")
}

model user_patients {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id        BigInt                   @db.UnsignedBigInt
  duration               String?                  @default("14") @db.VarChar(255)
  isActive               Boolean                  @default(true)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  classified_as_contacts classified_as_contacts[]
  user_accounts          user_accounts            @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "user_patients_user_account_id_foreign")

  @@index([user_account_id], map: "user_patients_user_account_id_foreign")
}

model user_responses {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id BigInt        @db.UnsignedBigInt
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  answers         answers[]
  user_accounts   user_accounts @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "user_responses_user_account_id_foreign")

  @@index([user_account_id], map: "user_responses_user_account_id_foreign")
}

model user_taggeds {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id        BigInt                   @db.UnsignedBigInt
  duration               String?                  @default("14") @db.VarChar(255)
  isActive               Boolean                  @default(true)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  classified_as_contacts classified_as_contacts[]
  user_accounts          user_accounts            @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "user_taggeds_user_account_id_foreign")

  @@index([user_account_id], map: "user_taggeds_user_account_id_foreign")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model visited_location_records {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_account_id BigInt        @db.UnsignedBigInt
  location_id     BigInt        @db.UnsignedBigInt
  time_in         DateTime?     @db.Time(0)
  time_out        DateTime?     @db.Time(0)
  time_duration   String?       @db.VarChar(255)
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  locations       locations     @relation(fields: [location_id], references: [id], onDelete: Cascade, map: "visited_location_records_location_id_foreign")
  user_accounts   user_accounts @relation(fields: [user_account_id], references: [id], onDelete: Cascade, map: "visited_location_records_user_account_id_foreign")

  @@index([location_id], map: "visited_location_records_location_id_foreign")
  @@index([user_account_id], map: "visited_location_records_user_account_id_foreign")
}
